type Query {
  sendNotificationToAllUsers(
    subject: String!
    body: String!
    locale: String!
    type: NotificationType = EMAIL
  ): NotificationResult
  fetchEvent(id: ID!): EventData
  fetchEventForViewing(id: ID!): EventData
  fetchRegistrationCountByStatus(
    status: [String]!
    locationId: String
    event: Event
  ): RegistrationCountResult
  fetchRecordDetailsForVerification(id: String!): EventData
  hasChildLocation(parentId: String!): Location
  getUser(userId: String): User
  getUserByMobile(mobile: String): User
  getUserByEmail(email: String): User
  searchUsers(
    username: String
    mobile: String
    email: String
    status: String
    systemRole: String
    primaryOfficeId: String
    locationId: String
    count: Int
    skip: Int
    sort: String
  ): SearchUserResult
  searchFieldAgents(
    locationId: String
    primaryOfficeId: String
    status: String
    language: String
    timeStart: String!
    timeEnd: String!
    event: String
    count: Int
    skip: Int
    sort: String
  ): SearchFieldAgentResult
  verifyPasswordById(id: String!, password: String!): VerifyPasswordResult
  getTotalMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): TotalMetricsResult
  getRegistrationsListByFilter(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
    filterBy: String!
    skip: Int!
    size: Int!
  ): MixedTotalMetricsResult
  getVSExports: TotalVSExport
  getTotalPayments(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): [PaymentMetric!]
  getTotalCertifications(
    timeStart: String!
    timeEnd: String!
    locationId: String
  ): [CertificationMetric!]
  getTotalCorrections(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): [CorrectionMetric!]
  getLocationStatistics(
    locationId: String
    populationYear: Int!
  ): LocationStatisticsResponse
  getDeclarationsStartedMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String!
  ): DeclarationsStartedMetrics
  fetchMonthWiseEventMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): [MonthWiseEstimationMetric!]
  fetchLocationWiseEventMetrics(
    timeStart: String!
    timeEnd: String!
    locationId: String
    event: String!
  ): [LocationWiseEstimationMetric!]
  getUserAuditLog(
    practitionerId: String!
    skip: Int
    count: Int!
    timeStart: String
    timeEnd: String
  ): UserAuditLogResultSet
  getIndexedEvent(id: ID!): IndexedEvent!
  searchEvents(
    userId: String
    advancedSearchParameters: AdvancedSearchParametersInput!
    count: Int
    skip: Int
    sort: String
    sortColumn: String
    sortBy: [SortBy!]
  ): EventSearchResultSet!
  getSystemRoles(
    title: String
    value: ComparisonInput
    role: String
    active: Boolean
    sortBy: String
    sortOrder: String
  ): [SystemRole!]
  fetchSystem(clientId: ID!): System
}

type Mutation {
  requestEventCorrection(id: ID!, details: CorrectionInput!): ID!
  rejectEventCorrection(id: ID!, details: CorrectionRejectionInput!): ID!
  approveEventCorrection(id: ID!, details: EventInput!): ID!
  createEventCorrection(id: ID!, details: EventInput!): ID!
  createEvent(details: EventInput!): CreatedIds!
  markEventAsUnassigned(id: ID!): EventData
  markEventAsVerified(id: ID!, details: EventInput!): EventData
  markEventAsValidated(id: ID!, details: EventInput!): ID
  markEventAsRegistered(id: ID!, details: EventInput!): ID!
  markEventAsCertified(id: ID!, details: EventInput!): ID!
  markEventAsIssued(id: ID!, details: EventInput!): ID!
  markEventAsVoided(id: ID!, reason: String!, comment: String!): ID!
  markEventAsReinstated(id: ID!): Reinstated
  markEventAsNotDuplicate(id: ID!): ID!
  markEventAsArchived(
    id: ID!
    reason: String
    comment: String
    duplicateTrackingId: String
  ): ID!
  markEventAsDuplicate(
    id: ID!
    reason: String!
    comment: String
    duplicateTrackingId: String
  ): ID!
  createOrUpdateUser(user: UserInput!): User!
  activateUser(
    userId: String!
    password: String!
    securityQNAs: [SecurityQuestionAnswer]!
  ): String
  changePassword(
    userId: String!
    existingPassword: String!
    password: String!
  ): String
  changePhone(
    userId: String!
    phoneNumber: String!
    nonce: String!
    verifyCode: String!
  ): String
  changeEmail(
    userId: String!
    email: String!
    nonce: String!
    verifyCode: String!
  ): String
  changeAvatar(userId: String!, avatar: AvatarInput!): Avatar
  auditUser(
    userId: String!
    action: String!
    reason: String!
    comment: String
  ): String
  resendInvite(userId: String!): String
  usernameReminder(userId: String!): String
  resetPasswordInvite(userId: String!): String
  updateRole(systemRole: SystemRoleInput): Response!
  reactivateSystem(clientId: ID!): System
  deactivateSystem(clientId: ID!): System
  registerSystem(system: SystemInput): SystemSecret
  refreshSystemSecret(clientId: String!): SystemSecret
  updatePermissions(setting: UpdatePermissionsInput!): System
  deleteSystem(clientId: ID!): System
  bookmarkAdvancedSearch(
    bookmarkSearchInput: BookmarkSearchInput!
  ): BookMarkedSearches
  removeBookmarkedAdvancedSearch(
    removeBookmarkedSearchInput: RemoveBookmarkedSeachInput!
  ): BookMarkedSearches
}

type Dummy {
  dummy: String!
}

type NotificationResult {
  success: Boolean!
}

enum NotificationType {
  EMAIL
  SMS
}

type EventData {
  id: ID!
  type: String!
  createdAt: String!
  actions: [Action!]!
  duplicates: [ID!]!
  attachments: [Attachment!]!
  status: RegStatus!
}

type RegistrationCountResult {
  results: [StatusWiseRegistrationCount]!
  total: Int!
}

enum Event {
  birth
  death
  marriage
}

type Location {
  id: ID!
  _fhirID: ID
  identifier: [Identifier!]
  status: String
  name: String
  alias: [String!]
  description: String
  partOf: String
  type: String
  telecom: [ContactPoint]
  address: Address
  longitude: Float
  latitude: Float
  altitude: Float
  geoData: String
  hierarchy: [Location!]
}

type User {
  id: ID!
  userMgntUserID: ID!
  practitionerId: String!
  name: [HumanName!]!
  username: String
  mobile: String
  systemRole: SystemRoleType!
  role: Role!
  email: String
  status: Status!
  underInvestigation: Boolean
  primaryOffice: Location
  localRegistrar: LocalRegistrar
  identifier: Identifier
  signature: Signature
  creationDate: String!
  avatar: Avatar
  device: String
  searches: [BookmarkedSeachItem!]
}

type SearchUserResult {
  results: [User]
  totalItems: Int
}

type SearchFieldAgentResult {
  results: [SearchFieldAgentResponse]
  totalItems: Int
}

type VerifyPasswordResult {
  mobile: String
  scrope: [String]
  status: String
  username: String
  id: String
}

type TotalMetricsResult {
  estimated: Estimation!
  results: [EventMetrics!]!
}

union MixedTotalMetricsResult =
    TotalMetricsByRegistrar
  | TotalMetricsByLocation
  | TotalMetricsByTime

type TotalVSExport {
  results: [VSExport!]
}

type PaymentMetric {
  total: Float!
  paymentType: String!
}

type CertificationMetric {
  total: Float!
  eventType: String!
}

type CorrectionMetric {
  total: Float!
  reason: String!
}

type LocationStatisticsResponse {
  population: Int
  registrars: Int!
  offices: Int!
}

type DeclarationsStartedMetrics {
  fieldAgentDeclarations: Int!
  hospitalDeclarations: Int!
  officeDeclarations: Int!
}

type MonthWiseEstimationMetric {
  total: Float!
  withinTarget: Float!
  within1Year: Float!
  within5Years: Float!
  estimated: Float!
  month: Float!
  year: Float!
}

type LocationWiseEstimationMetric {
  total: Float!
  withinTarget: Float!
  within1Year: Float!
  within5Years: Float!
  estimated: Float!
  locationId: String!
  locationName: String!
}

type UserAuditLogResultSet {
  total: Int!
  results: [UserAuditLogResultItem!]!
}

type IndexedEvent {
  status: String!
  id: ID!
  type: String!
  createdAt: Date!
  createdAtLocation: String!
  modifiedAt: String!
  assignedTo: AssignmentData
  duplicates: [ID!]!
}

type EventSearchResultSet {
  results: [IndexedEvent!]!
  totalItems: Int!
}

input AdvancedSearchParametersInput {
  event: String
  name: String
  registrationStatuses: [String]
  dateOfEvent: String
  dateOfEventStart: String
  dateOfEventEnd: String
  timePeriodFrom: String
  contactNumber: String
  contactEmail: String
  nationalId: String
  registrationNumber: String
  trackingId: String
  recordId: ID
  dateOfRegistration: String
  dateOfRegistrationStart: String
  dateOfRegistrationEnd: String
  declarationLocationId: String
  declarationJurisdictionId: String
  eventLocationId: String
  eventCountry: String
  eventLocationLevel1: String
  eventLocationLevel2: String
  eventLocationLevel3: String
  eventLocationLevel4: String
  eventLocationLevel5: String
  childFirstNames: String
  childLastName: String
  childDoB: String
  childDoBStart: String
  childDoBEnd: String
  childGender: String
  childIdentifier: String
  deceasedFirstNames: String
  deceasedFamilyName: String
  deceasedGender: String
  deceasedDoB: String
  deceasedDoBStart: String
  deceasedDoBEnd: String
  deceasedIdentifier: String
  groomFirstNames: String
  groomFamilyName: String
  groomDoB: String
  groomDoBStart: String
  groomDoBEnd: String
  groomIdentifier: String
  brideFirstNames: String
  brideFamilyName: String
  brideDoB: String
  brideDoBStart: String
  brideDoBEnd: String
  brideIdentifier: String
  dateOfMarriage: String
  motherFirstNames: String
  motherFamilyName: String
  motherDoB: String
  motherDoBStart: String
  motherDoBEnd: String
  motherIdentifier: String
  fatherFirstNames: String
  fatherFamilyName: String
  fatherDoB: String
  fatherDoBStart: String
  fatherDoBEnd: String
  fatherIdentifier: String
  informantFirstNames: String
  informantFamilyName: String
  informantDoB: String
  informantDoBStart: String
  informantDoBEnd: String
  informantIdentifier: String
  compositionType: [String]
}

input SortBy {
  column: String!
  order: String!
}

type SystemRole {
  id: ID!
  value: SystemRoleType!
  roles: [Role!]!
  active: Boolean!
}

input ComparisonInput {
  eq: String
  gt: String
  lt: String
  gte: String
  lte: String
  in: [String!]
  ne: String
  nin: [String!]
}

type System {
  _id: ID!
  clientId: ID!
  shaSecret: ID!
  status: SystemStatus!
  name: String!
  type: SystemType!
  integratingSystemType: IntegratingSystemType
  settings: SystemSettings
}

input CorrectionInput {
  requester: String!
  requesterOther: String
  hasShowedVerifiedDocument: Boolean!
  noSupportingDocumentationRequired: Boolean!
  attachments: [AttachmentInput!]!
  payment: CorrectionPaymentInput
  values: [CorrectionValueInput!]!
  location: LocationInput!
  reason: String!
  otherReason: String!
  note: String!
}

input CorrectionRejectionInput {
  reason: String!
  timeLoggedMS: Int!
}

input EventInput {
  id: String
  type: String
  actions: [ActionsInput]
}

type CreatedIds {
  compositionId: String
  trackingId: String
  isPotentiallyDuplicate: Boolean
}

type Reinstated {
  taskEntryResourceID: ID!
  registrationStatus: RegStatus
}

input UserInput {
  id: ID
  name: [HumanNameInput!]!
  identifier: [UserIdentifierInput]
  username: String
  mobile: String
  password: String
  status: Status
  systemRole: SystemRoleType!
  role: String
  email: String
  primaryOffice: String
  device: String
  signature: SignatureInput
}

input SecurityQuestionAnswer {
  questionKey: String
  answer: String
}

type Avatar {
  type: String!
  data: String!
}

input AvatarInput {
  type: String!
  data: String!
}

type Response {
  roleIdMap: Map!
}

input SystemRoleInput {
  id: ID!
  value: String
  active: Boolean
  roles: [RoleInput!]
}

type SystemSecret {
  system: System!
  clientSecret: ID!
}

input SystemInput {
  name: String!
  type: SystemType!
  settings: SystemSettingsInput
  integratingSystemType: IntegratingSystemType
}

input UpdatePermissionsInput {
  clientId: String!
  webhook: [WebhookInput!]!
}

type BookMarkedSearches {
  searchList: [BookmarkedSeachItem!]
}

input BookmarkSearchInput {
  userId: String!
  name: String!
  parameters: AdvancedSearchParametersInput!
}

input RemoveBookmarkedSeachInput {
  userId: String!
  searchId: String!
}

type Action {
  type: RegAction!
  createdBy: String!
  createdAt: String!
  createdAtLocation: String!
  fields: [Field!]!
}

type Attachment {
  contentType: String!
  uri: String!
  description: String!
}

enum RegStatus {
  IN_PROGRESS
  ARCHIVED
  DECLARED
  DECLARATION_UPDATED
  WAITING_VALIDATION
  CORRECTION_REQUESTED
  VALIDATED
  REGISTERED
  CERTIFIED
  REJECTED
  ISSUED
}

type StatusWiseRegistrationCount {
  status: String!
  count: Int!
}

type Identifier {
  system: String
  value: String
}

type ContactPoint {
  system: String
  value: String
  use: String
}

type Address {
  use: String
  type: String
  text: String
  line: [String]
  lineName: [String]
  city: String
  district: String
  districtName: String
  state: String
  stateName: String
  postalCode: String
  country: String
  from: Date
  to: Date
  partOf: String
}

type HumanName {
  use: String
  firstNames: String
  middleName: String
  familyName: String
  marriedLastName: String
}

enum SystemRoleType {
  FIELD_AGENT
  REGISTRATION_AGENT
  LOCAL_REGISTRAR
  LOCAL_SYSTEM_ADMIN
  NATIONAL_SYSTEM_ADMIN
  PERFORMANCE_MANAGEMENT
  NATIONAL_REGISTRAR
}

type Role {
  _id: ID!
  labels: [RoleLabel!]!
}

enum Status {
  active
  deactivated
  pending
  disabled
}

type LocalRegistrar {
  name: [HumanName]!
  role: SystemRoleType!
  signature: Signature
}

type Signature {
  data: String
  type: String
}

type BookmarkedSeachItem {
  searchId: String!
  name: String!
  parameters: AdvancedSeachParameters!
}

type SearchFieldAgentResponse {
  practitionerId: String
  fullName: String
  role: Role
  status: Status
  avatar: Avatar
  primaryOfficeId: String
  creationDate: String
  totalNumberOfDeclarationStarted: Int
  totalNumberOfInProgressAppStarted: Int
  totalNumberOfRejectedDeclarations: Int
  averageTimeForDeclaredDeclarations: Int
}

type Estimation {
  totalEstimation: Float!
  maleEstimation: Float!
  femaleEstimation: Float!
  locationId: String!
  locationLevel: String!
}

type EventMetrics {
  total: Int!
  gender: String!
  eventLocationType: String!
  timeLabel: String!
  practitionerRole: String!
}

type TotalMetricsByRegistrar {
  results: [EventMetricsByRegistrar!]!
  total: Int
}

type TotalMetricsByLocation {
  results: [EventMetricsByLocation!]!
  total: Int
}

type TotalMetricsByTime {
  results: [EventMetricsByTime!]!
  total: Int
}

type VSExport {
  event: String!
  startDate: Date!
  endDate: Date!
  fileSize: String!
  url: String!
  createdOn: Date!
}

union UserAuditLogResultItem =
    UserAuditLogItemWithComposition
  | UserAuditLogItem

scalar Date

type AssignmentData {
  practitionerId: String!
  firstName: String!
  lastName: String!
  officeName: String!
  avatarURL: String!
}

enum SystemStatus {
  active
  deactivated
}

enum SystemType {
  NATIONAL_ID
  HEALTH
  RECORD_SEARCH
  WEBHOOK
}

enum IntegratingSystemType {
  MOSIP
  OTHER
}

type SystemSettings {
  dailyQuota: Int
  webhook: [WebhookPermission!]
  openIdProviderClientId: String
  openIdProviderBaseUrl: String
  openIdProviderClaims: String
}

input AttachmentInput {
  _fhirID: ID
  contentType: String
  data: String
  uri: String
  status: AttachmentInputStatus
  originalFileName: String
  systemFileName: String
  type: String
  description: String
  subject: String
  createdAt: Date
}

input CorrectionPaymentInput {
  _fhirID: ID
  attachmentData: String
  type: PaymentType!
  amount: Float!
  outcome: PaymentOutcomeType!
  date: Date!
}

input CorrectionValueInput {
  section: String!
  fieldName: String!
  oldValue: FieldValue
  newValue: FieldValue!
}

input LocationInput {
  _fhirID: ID
  identifier: [ID]
  status: String
  name: String
  alias: [String]
  description: String
  partOf: String
  type: String
  telecom: [ContactPointInput]
  address: AddressInput
  longitude: Float
  latitude: Float
  altitude: Float
  geoData: String
}

input ActionsInput {
  type: String!
  fields: [FieldsInput!]!
}

input HumanNameInput {
  use: String
  firstNames: String
  middleName: String
  familyName: String
  marriedLastName: String
}

input UserIdentifierInput {
  use: String
  system: String
  value: String
}

input SignatureInput {
  data: String!
  type: String
}

scalar Map

input RoleInput {
  _id: ID
  labels: [LabelInput!]!
}

input SystemSettingsInput {
  dailyQuota: Int
  webhook: [WebhookInput]
}

input WebhookInput {
  event: String!
  permissions: [String]!
}

enum RegAction {
  VERIFIED
  ASSIGNED
  UNASSIGNED
  REINSTATED
  REQUESTED_CORRECTION
  APPROVED_CORRECTION
  REJECTED_CORRECTION
  CORRECTED
  DOWNLOADED
  VIEWED
  MARKED_AS_DUPLICATE
  MARKED_AS_NOT_DUPLICATE
  FLAGGED_AS_POTENTIAL_DUPLICATE
}

type Field {
  fieldId: String!
  value: String!
}

type RoleLabel {
  lang: String!
  label: String!
}

type AdvancedSeachParameters {
  event: String
  name: String
  registrationStatuses: [String]
  dateOfEvent: String
  dateOfEventStart: String
  dateOfEventEnd: String
  timePeriodFrom: String
  contactNumber: String
  contactEmail: String
  nationalId: String
  registrationNumber: String
  trackingId: String
  dateOfRegistration: String
  dateOfRegistrationStart: String
  dateOfRegistrationEnd: String
  declarationLocationId: String
  declarationJurisdictionId: String
  eventLocationId: String
  eventCountry: String
  eventLocationLevel1: String
  eventLocationLevel2: String
  eventLocationLevel3: String
  eventLocationLevel4: String
  eventLocationLevel5: String
  childFirstNames: String
  childLastName: String
  childDoB: String
  childDoBStart: String
  childDoBEnd: String
  childGender: String
  childIdentifier: String
  deceasedFirstNames: String
  deceasedFamilyName: String
  deceasedGender: String
  deceasedDoB: String
  deceasedDoBStart: String
  deceasedDoBEnd: String
  deceasedIdentifier: String
  motherFirstNames: String
  motherFamilyName: String
  motherDoB: String
  motherDoBStart: String
  motherDoBEnd: String
  motherIdentifier: String
  fatherFirstNames: String
  fatherFamilyName: String
  fatherDoB: String
  fatherDoBStart: String
  fatherDoBEnd: String
  fatherIdentifier: String
  informantFirstNames: String
  informantFamilyName: String
  informantDoB: String
  informantDoBStart: String
  informantDoBEnd: String
  informantIdentifier: String
  compositionType: [String]
}

type EventMetricsByRegistrar {
  registrarPractitioner: User
  total: Int!
  late: Int!
  delayed: Int!
}

type EventMetricsByLocation {
  location: Location!
  total: Int!
  late: Int!
  delayed: Int!
  home: Int!
  healthFacility: Int!
}

type EventMetricsByTime {
  total: Int!
  late: Int!
  delayed: Int!
  home: Int!
  healthFacility: Int!
  month: String!
  time: String!
}

type UserAuditLogItemWithComposition implements AuditLogItemBase {
  time: String!
  ipAddress: String!
  userAgent: String!
  action: String!
  practitionerId: String!
  data: AdditionalIdWithCompositionId!
}

type UserAuditLogItem implements AuditLogItemBase {
  time: String!
  ipAddress: String!
  userAgent: String!
  action: String!
  practitionerId: String!
}

type WebhookPermission {
  event: String!
  permissions: [String!]!
}

enum AttachmentInputStatus {
  approved
  validated
  deleted
}

enum PaymentType {
  MANUAL
}

enum PaymentOutcomeType {
  COMPLETED
  ERROR
  PARTIAL
}

scalar FieldValue

input ContactPointInput {
  system: TelecomSystem
  value: String
  use: TelecomUse
}

input AddressInput {
  use: AddressUse
  type: AddressType
  text: String
  line: [String!]
  city: String
  district: String
  state: String
  postalCode: String
  country: String
  from: Date
  to: Date
  partOf: String
}

input FieldsInput {
  fieldId: String!
  value: String!
}

input LabelInput {
  lang: String!
  label: String!
}

interface AuditLogItemBase {
  time: String!
  ipAddress: String!
  userAgent: String!
  action: String!
  practitionerId: String!
}

type AdditionalIdWithCompositionId {
  compositionId: String!
  trackingId: String!
}

enum TelecomSystem {
  other
  phone
  fax
  email
  pager
  url
  sms
}

enum TelecomUse {
  home
  work
  temp
  old
  mobile
}

enum AddressUse {
  home
  work
  temp
  old
}

enum AddressType {
  PRIMARY_ADDRESS
  SECONDARY_ADDRESS
  postal
  physical
  both
}
