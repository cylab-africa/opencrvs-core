/*
 * This Source Code Form is subject to the terms of the Mozilla Public
 * License, v. 2.0. If a copy of the MPL was not distributed with this
 * file, You can obtain one at https://mozilla.org/MPL/2.0/.
 *
 * OpenCRVS is also distributed under the terms of the Civil Registration
 * & Healthcare Disclaimer located at http://opencrvs.org/license.
 *
 * Copyright (C) The OpenCRVS Authors located at https://github.com/opencrvs/opencrvs-core/blob/master/AUTHORS.
 */

/*
 * DO NOT EDIT! This file is auto-generated by yarn generate-gateway-types - see 'codegen.yml'
 */
import { PlainDate } from '@client/utils/date-formatting'

export type Maybe<T> = T | null
export type InputMaybe<T> = Maybe<T>
export type Exact<T extends { [key: string]: unknown }> = {
  [K in keyof T]: T[K]
}
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]?: Maybe<T[SubKey]>
}
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {
  [SubKey in K]: Maybe<T[SubKey]>
}
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: string
  String: string
  Boolean: boolean
  Int: number
  Float: number
  Date: any
  FieldValue: any
  Map: any
}

export type Action = {
  __typename?: 'Action'
  createdAt: Scalars['String']
  createdAtLocation: Scalars['String']
  createdBy: Scalars['String']
  fields: Array<Field>
  type: RegAction
}

export type ActionsInput = {
  fields: Array<FieldsInput>
  type: Scalars['String']
}

export type AdditionalIdWithCompositionId = {
  __typename?: 'AdditionalIdWithCompositionId'
  compositionId: Scalars['String']
  trackingId: Scalars['String']
}

export type Address = {
  __typename?: 'Address'
  city?: Maybe<Scalars['String']>
  country?: Maybe<Scalars['String']>
  district?: Maybe<Scalars['String']>
  districtName?: Maybe<Scalars['String']>
  from?: Maybe<Scalars['Date']>
  line?: Maybe<Array<Maybe<Scalars['String']>>>
  lineName?: Maybe<Array<Maybe<Scalars['String']>>>
  partOf?: Maybe<Scalars['String']>
  postalCode?: Maybe<Scalars['String']>
  state?: Maybe<Scalars['String']>
  stateName?: Maybe<Scalars['String']>
  text?: Maybe<Scalars['String']>
  to?: Maybe<Scalars['Date']>
  type?: Maybe<Scalars['String']>
  use?: Maybe<Scalars['String']>
}

export type AddressInput = {
  city?: InputMaybe<Scalars['String']>
  country?: InputMaybe<Scalars['String']>
  district?: InputMaybe<Scalars['String']>
  from?: InputMaybe<Scalars['Date']>
  line?: InputMaybe<Array<Scalars['String']>>
  partOf?: InputMaybe<Scalars['String']>
  postalCode?: InputMaybe<Scalars['String']>
  state?: InputMaybe<Scalars['String']>
  text?: InputMaybe<Scalars['String']>
  to?: InputMaybe<Scalars['Date']>
  type?: InputMaybe<AddressType>
  use?: InputMaybe<AddressUse>
}

export enum AddressType {
  PrimaryAddress = 'PRIMARY_ADDRESS',
  SecondaryAddress = 'SECONDARY_ADDRESS',
  Both = 'both',
  Physical = 'physical',
  Postal = 'postal'
}

export enum AddressUse {
  Home = 'home',
  Old = 'old',
  Temp = 'temp',
  Work = 'work'
}

export type AdvancedSeachParameters = {
  __typename?: 'AdvancedSeachParameters'
  childDoB?: Maybe<Scalars['String']>
  childDoBEnd?: Maybe<Scalars['String']>
  childDoBStart?: Maybe<Scalars['String']>
  childFirstNames?: Maybe<Scalars['String']>
  childGender?: Maybe<Scalars['String']>
  childIdentifier?: Maybe<Scalars['String']>
  childLastName?: Maybe<Scalars['String']>
  compositionType?: Maybe<Array<Maybe<Scalars['String']>>>
  contactEmail?: Maybe<Scalars['String']>
  contactNumber?: Maybe<Scalars['String']>
  dateOfEvent?: Maybe<Scalars['String']>
  dateOfEventEnd?: Maybe<Scalars['String']>
  dateOfEventStart?: Maybe<Scalars['String']>
  dateOfRegistration?: Maybe<Scalars['String']>
  dateOfRegistrationEnd?: Maybe<Scalars['String']>
  dateOfRegistrationStart?: Maybe<Scalars['String']>
  deceasedDoB?: Maybe<Scalars['String']>
  deceasedDoBEnd?: Maybe<Scalars['String']>
  deceasedDoBStart?: Maybe<Scalars['String']>
  deceasedFamilyName?: Maybe<Scalars['String']>
  deceasedFirstNames?: Maybe<Scalars['String']>
  deceasedGender?: Maybe<Scalars['String']>
  deceasedIdentifier?: Maybe<Scalars['String']>
  declarationJurisdictionId?: Maybe<Scalars['String']>
  declarationLocationId?: Maybe<Scalars['String']>
  event?: Maybe<Scalars['String']>
  eventCountry?: Maybe<Scalars['String']>
  eventLocationId?: Maybe<Scalars['String']>
  eventLocationLevel1?: Maybe<Scalars['String']>
  eventLocationLevel2?: Maybe<Scalars['String']>
  eventLocationLevel3?: Maybe<Scalars['String']>
  eventLocationLevel4?: Maybe<Scalars['String']>
  eventLocationLevel5?: Maybe<Scalars['String']>
  fatherDoB?: Maybe<Scalars['String']>
  fatherDoBEnd?: Maybe<Scalars['String']>
  fatherDoBStart?: Maybe<Scalars['String']>
  fatherFamilyName?: Maybe<Scalars['String']>
  fatherFirstNames?: Maybe<Scalars['String']>
  fatherIdentifier?: Maybe<Scalars['String']>
  informantDoB?: Maybe<Scalars['String']>
  informantDoBEnd?: Maybe<Scalars['String']>
  informantDoBStart?: Maybe<Scalars['String']>
  informantFamilyName?: Maybe<Scalars['String']>
  informantFirstNames?: Maybe<Scalars['String']>
  informantIdentifier?: Maybe<Scalars['String']>
  motherDoB?: Maybe<Scalars['String']>
  motherDoBEnd?: Maybe<Scalars['String']>
  motherDoBStart?: Maybe<Scalars['String']>
  motherFamilyName?: Maybe<Scalars['String']>
  motherFirstNames?: Maybe<Scalars['String']>
  motherIdentifier?: Maybe<Scalars['String']>
  name?: Maybe<Scalars['String']>
  nationalId?: Maybe<Scalars['String']>
  registrationNumber?: Maybe<Scalars['String']>
  registrationStatuses?: Maybe<Array<Maybe<Scalars['String']>>>
  timePeriodFrom?: Maybe<Scalars['String']>
  trackingId?: Maybe<Scalars['String']>
}

export type AdvancedSearchParametersInput = {
  brideDoB?: InputMaybe<Scalars['String']>
  brideDoBEnd?: InputMaybe<Scalars['String']>
  brideDoBStart?: InputMaybe<Scalars['String']>
  brideFamilyName?: InputMaybe<Scalars['String']>
  brideFirstNames?: InputMaybe<Scalars['String']>
  brideIdentifier?: InputMaybe<Scalars['String']>
  childDoB?: InputMaybe<Scalars['String']>
  childDoBEnd?: InputMaybe<Scalars['String']>
  childDoBStart?: InputMaybe<Scalars['String']>
  childFirstNames?: InputMaybe<Scalars['String']>
  childGender?: InputMaybe<Scalars['String']>
  childIdentifier?: InputMaybe<Scalars['String']>
  childLastName?: InputMaybe<Scalars['String']>
  compositionType?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
  contactEmail?: InputMaybe<Scalars['String']>
  contactNumber?: InputMaybe<Scalars['String']>
  dateOfEvent?: InputMaybe<Scalars['String']>
  dateOfEventEnd?: InputMaybe<Scalars['String']>
  dateOfEventStart?: InputMaybe<Scalars['String']>
  dateOfMarriage?: InputMaybe<Scalars['String']>
  dateOfRegistration?: InputMaybe<Scalars['String']>
  dateOfRegistrationEnd?: InputMaybe<Scalars['String']>
  dateOfRegistrationStart?: InputMaybe<Scalars['String']>
  deceasedDoB?: InputMaybe<Scalars['String']>
  deceasedDoBEnd?: InputMaybe<Scalars['String']>
  deceasedDoBStart?: InputMaybe<Scalars['String']>
  deceasedFamilyName?: InputMaybe<Scalars['String']>
  deceasedFirstNames?: InputMaybe<Scalars['String']>
  deceasedGender?: InputMaybe<Scalars['String']>
  deceasedIdentifier?: InputMaybe<Scalars['String']>
  declarationJurisdictionId?: InputMaybe<Scalars['String']>
  declarationLocationId?: InputMaybe<Scalars['String']>
  event?: InputMaybe<Scalars['String']>
  eventCountry?: InputMaybe<Scalars['String']>
  eventLocationId?: InputMaybe<Scalars['String']>
  eventLocationLevel1?: InputMaybe<Scalars['String']>
  eventLocationLevel2?: InputMaybe<Scalars['String']>
  eventLocationLevel3?: InputMaybe<Scalars['String']>
  eventLocationLevel4?: InputMaybe<Scalars['String']>
  eventLocationLevel5?: InputMaybe<Scalars['String']>
  fatherDoB?: InputMaybe<Scalars['String']>
  fatherDoBEnd?: InputMaybe<Scalars['String']>
  fatherDoBStart?: InputMaybe<Scalars['String']>
  fatherFamilyName?: InputMaybe<Scalars['String']>
  fatherFirstNames?: InputMaybe<Scalars['String']>
  fatherIdentifier?: InputMaybe<Scalars['String']>
  groomDoB?: InputMaybe<Scalars['String']>
  groomDoBEnd?: InputMaybe<Scalars['String']>
  groomDoBStart?: InputMaybe<Scalars['String']>
  groomFamilyName?: InputMaybe<Scalars['String']>
  groomFirstNames?: InputMaybe<Scalars['String']>
  groomIdentifier?: InputMaybe<Scalars['String']>
  informantDoB?: InputMaybe<Scalars['String']>
  informantDoBEnd?: InputMaybe<Scalars['String']>
  informantDoBStart?: InputMaybe<Scalars['String']>
  informantFamilyName?: InputMaybe<Scalars['String']>
  informantFirstNames?: InputMaybe<Scalars['String']>
  informantIdentifier?: InputMaybe<Scalars['String']>
  motherDoB?: InputMaybe<Scalars['String']>
  motherDoBEnd?: InputMaybe<Scalars['String']>
  motherDoBStart?: InputMaybe<Scalars['String']>
  motherFamilyName?: InputMaybe<Scalars['String']>
  motherFirstNames?: InputMaybe<Scalars['String']>
  motherIdentifier?: InputMaybe<Scalars['String']>
  name?: InputMaybe<Scalars['String']>
  nationalId?: InputMaybe<Scalars['String']>
  recordId?: InputMaybe<Scalars['ID']>
  registrationNumber?: InputMaybe<Scalars['String']>
  registrationStatuses?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
  timePeriodFrom?: InputMaybe<Scalars['String']>
  trackingId?: InputMaybe<Scalars['String']>
}

export type AssignmentData = {
  __typename?: 'AssignmentData'
  avatarURL: Scalars['String']
  firstName: Scalars['String']
  lastName: Scalars['String']
  officeName: Scalars['String']
  practitionerId: Scalars['String']
}

export type AttachmentInput = {
  _fhirID?: InputMaybe<Scalars['ID']>
  contentType?: InputMaybe<Scalars['String']>
  createdAt?: InputMaybe<Scalars['Date']>
  data?: InputMaybe<Scalars['String']>
  description?: InputMaybe<Scalars['String']>
  originalFileName?: InputMaybe<Scalars['String']>
  status?: InputMaybe<AttachmentInputStatus>
  subject?: InputMaybe<Scalars['String']>
  systemFileName?: InputMaybe<Scalars['String']>
  type?: InputMaybe<Scalars['String']>
  uri?: InputMaybe<Scalars['String']>
}

export enum AttachmentInputStatus {
  Approved = 'approved',
  Deleted = 'deleted',
  Validated = 'validated'
}

export type AuditLogItemBase = {
  action: Scalars['String']
  ipAddress: Scalars['String']
  practitionerId: Scalars['String']
  time: Scalars['String']
  userAgent: Scalars['String']
}

export type Avatar = {
  __typename?: 'Avatar'
  data: Scalars['String']
  type: Scalars['String']
}

export type AvatarInput = {
  data: Scalars['String']
  type: Scalars['String']
}

export type BookMarkedSearches = {
  __typename?: 'BookMarkedSearches'
  searchList?: Maybe<Array<BookmarkedSeachItem>>
}

export type BookmarkSearchInput = {
  name: Scalars['String']
  parameters: AdvancedSearchParametersInput
  userId: Scalars['String']
}

export type BookmarkedSeachItem = {
  __typename?: 'BookmarkedSeachItem'
  name: Scalars['String']
  parameters: AdvancedSeachParameters
  searchId: Scalars['String']
}

export type CertificationMetric = {
  __typename?: 'CertificationMetric'
  eventType: Scalars['String']
  total: Scalars['Float']
}

export type ComparisonInput = {
  eq?: InputMaybe<Scalars['String']>
  gt?: InputMaybe<Scalars['String']>
  gte?: InputMaybe<Scalars['String']>
  in?: InputMaybe<Array<Scalars['String']>>
  lt?: InputMaybe<Scalars['String']>
  lte?: InputMaybe<Scalars['String']>
  ne?: InputMaybe<Scalars['String']>
  nin?: InputMaybe<Array<Scalars['String']>>
}

export type ContactPoint = {
  __typename?: 'ContactPoint'
  system?: Maybe<Scalars['String']>
  use?: Maybe<Scalars['String']>
  value?: Maybe<Scalars['String']>
}

export type ContactPointInput = {
  system?: InputMaybe<TelecomSystem>
  use?: InputMaybe<TelecomUse>
  value?: InputMaybe<Scalars['String']>
}

export type CorrectionInput = {
  attachments: Array<AttachmentInput>
  hasShowedVerifiedDocument: Scalars['Boolean']
  location: LocationInput
  noSupportingDocumentationRequired: Scalars['Boolean']
  note: Scalars['String']
  otherReason: Scalars['String']
  payment?: InputMaybe<CorrectionPaymentInput>
  reason: Scalars['String']
  requester: Scalars['String']
  requesterOther?: InputMaybe<Scalars['String']>
  values: Array<CorrectionValueInput>
}

export type CorrectionMetric = {
  __typename?: 'CorrectionMetric'
  reason: Scalars['String']
  total: Scalars['Float']
}

export type CorrectionPaymentInput = {
  _fhirID?: InputMaybe<Scalars['ID']>
  amount: Scalars['Float']
  attachmentData?: InputMaybe<Scalars['String']>
  date: Scalars['Date']
  outcome: PaymentOutcomeType
  type: PaymentType
}

export type CorrectionRejectionInput = {
  reason: Scalars['String']
  timeLoggedMS: Scalars['Int']
}

export type CorrectionValueInput = {
  fieldName: Scalars['String']
  newValue: Scalars['FieldValue']
  oldValue?: InputMaybe<Scalars['FieldValue']>
  section: Scalars['String']
}

export type CreatedIds = {
  __typename?: 'CreatedIds'
  compositionId?: Maybe<Scalars['String']>
  isPotentiallyDuplicate?: Maybe<Scalars['Boolean']>
  trackingId?: Maybe<Scalars['String']>
}

export type DeclarationsStartedMetrics = {
  __typename?: 'DeclarationsStartedMetrics'
  fieldAgentDeclarations: Scalars['Int']
  hospitalDeclarations: Scalars['Int']
  officeDeclarations: Scalars['Int']
}

export type Dummy = {
  __typename?: 'Dummy'
  dummy: Scalars['String']
}

export type Estimation = {
  __typename?: 'Estimation'
  femaleEstimation: Scalars['Float']
  locationId: Scalars['String']
  locationLevel: Scalars['String']
  maleEstimation: Scalars['Float']
  totalEstimation: Scalars['Float']
}

export enum Event {
  Birth = 'birth',
  Death = 'death',
  Marriage = 'marriage'
}

export type EventData = {
  __typename?: 'EventData'
  actions: Array<Action>
  createdAt: Scalars['String']
  id: Scalars['ID']
  type: Scalars['String']
}

export type EventInput = {
  actions?: InputMaybe<Array<InputMaybe<ActionsInput>>>
  id?: InputMaybe<Scalars['String']>
  type?: InputMaybe<Scalars['String']>
}

export type EventMetrics = {
  __typename?: 'EventMetrics'
  eventLocationType: Scalars['String']
  gender: Scalars['String']
  practitionerRole: Scalars['String']
  timeLabel: Scalars['String']
  total: Scalars['Int']
}

export type EventMetricsByLocation = {
  __typename?: 'EventMetricsByLocation'
  delayed: Scalars['Int']
  healthFacility: Scalars['Int']
  home: Scalars['Int']
  late: Scalars['Int']
  location: Location
  total: Scalars['Int']
}

export type EventMetricsByRegistrar = {
  __typename?: 'EventMetricsByRegistrar'
  delayed: Scalars['Int']
  late: Scalars['Int']
  registrarPractitioner?: Maybe<User>
  total: Scalars['Int']
}

export type EventMetricsByTime = {
  __typename?: 'EventMetricsByTime'
  delayed: Scalars['Int']
  healthFacility: Scalars['Int']
  home: Scalars['Int']
  late: Scalars['Int']
  month: Scalars['String']
  time: Scalars['String']
  total: Scalars['Int']
}

export type EventSearchResultSet = {
  __typename?: 'EventSearchResultSet'
  results: Array<IndexedEvent>
  totalItems: Scalars['Int']
}

export type Field = {
  __typename?: 'Field'
  fieldId: Scalars['String']
  value: Scalars['String']
}

export type FieldsInput = {
  fieldId: Scalars['String']
  value: Scalars['String']
}

export type HumanName = {
  __typename?: 'HumanName'
  familyName?: Maybe<Scalars['String']>
  firstNames?: Maybe<Scalars['String']>
  marriedLastName?: Maybe<Scalars['String']>
  middleName?: Maybe<Scalars['String']>
  use?: Maybe<Scalars['String']>
}

export type HumanNameInput = {
  familyName?: InputMaybe<Scalars['String']>
  firstNames?: InputMaybe<Scalars['String']>
  marriedLastName?: InputMaybe<Scalars['String']>
  middleName?: InputMaybe<Scalars['String']>
  use?: InputMaybe<Scalars['String']>
}

export type Identifier = {
  __typename?: 'Identifier'
  system?: Maybe<Scalars['String']>
  value?: Maybe<Scalars['String']>
}

export type IndexedEvent = {
  __typename?: 'IndexedEvent'
  assignedTo?: Maybe<AssignmentData>
  createdAt: Scalars['Date']
  createdAtLocation: Scalars['String']
  id: Scalars['ID']
  modifiedAt: Scalars['String']
  status: Scalars['String']
  type: Scalars['String']
}

export enum IntegratingSystemType {
  Mosip = 'MOSIP',
  Other = 'OTHER'
}

export type LabelInput = {
  label: Scalars['String']
  lang: Scalars['String']
}

export type LocalRegistrar = {
  __typename?: 'LocalRegistrar'
  name: Array<Maybe<HumanName>>
  role: SystemRoleType
  signature?: Maybe<Signature>
}

export type Location = {
  __typename?: 'Location'
  _fhirID?: Maybe<Scalars['ID']>
  address?: Maybe<Address>
  alias?: Maybe<Array<Scalars['String']>>
  altitude?: Maybe<Scalars['Float']>
  description?: Maybe<Scalars['String']>
  geoData?: Maybe<Scalars['String']>
  hierarchy?: Maybe<Array<Location>>
  id: Scalars['ID']
  identifier?: Maybe<Array<Identifier>>
  latitude?: Maybe<Scalars['Float']>
  longitude?: Maybe<Scalars['Float']>
  name?: Maybe<Scalars['String']>
  partOf?: Maybe<Scalars['String']>
  status?: Maybe<Scalars['String']>
  telecom?: Maybe<Array<Maybe<ContactPoint>>>
  type?: Maybe<Scalars['String']>
}

export type LocationInput = {
  _fhirID?: InputMaybe<Scalars['ID']>
  address?: InputMaybe<AddressInput>
  alias?: InputMaybe<Array<InputMaybe<Scalars['String']>>>
  altitude?: InputMaybe<Scalars['Float']>
  description?: InputMaybe<Scalars['String']>
  geoData?: InputMaybe<Scalars['String']>
  identifier?: InputMaybe<Array<InputMaybe<Scalars['ID']>>>
  latitude?: InputMaybe<Scalars['Float']>
  longitude?: InputMaybe<Scalars['Float']>
  name?: InputMaybe<Scalars['String']>
  partOf?: InputMaybe<Scalars['String']>
  status?: InputMaybe<Scalars['String']>
  telecom?: InputMaybe<Array<InputMaybe<ContactPointInput>>>
  type?: InputMaybe<Scalars['String']>
}

export type LocationStatisticsResponse = {
  __typename?: 'LocationStatisticsResponse'
  offices: Scalars['Int']
  population?: Maybe<Scalars['Int']>
  registrars: Scalars['Int']
}

export type LocationWiseEstimationMetric = {
  __typename?: 'LocationWiseEstimationMetric'
  estimated: Scalars['Float']
  locationId: Scalars['String']
  locationName: Scalars['String']
  total: Scalars['Float']
  within1Year: Scalars['Float']
  within5Years: Scalars['Float']
  withinTarget: Scalars['Float']
}

export type MixedTotalMetricsResult =
  | TotalMetricsByLocation
  | TotalMetricsByRegistrar
  | TotalMetricsByTime

export type MonthWiseEstimationMetric = {
  __typename?: 'MonthWiseEstimationMetric'
  estimated: Scalars['Float']
  month: Scalars['Float']
  total: Scalars['Float']
  within1Year: Scalars['Float']
  within5Years: Scalars['Float']
  withinTarget: Scalars['Float']
  year: Scalars['Float']
}

export type Mutation = {
  __typename?: 'Mutation'
  activateUser?: Maybe<Scalars['String']>
  approveEventCorrection: Scalars['ID']
  auditUser?: Maybe<Scalars['String']>
  bookmarkAdvancedSearch?: Maybe<BookMarkedSearches>
  changeAvatar?: Maybe<Avatar>
  changeEmail?: Maybe<Scalars['String']>
  changePassword?: Maybe<Scalars['String']>
  changePhone?: Maybe<Scalars['String']>
  createEvent: CreatedIds
  createEventCorrection: Scalars['ID']
  createOrUpdateUser: User
  deactivateSystem?: Maybe<System>
  deleteSystem?: Maybe<System>
  markEventAsArchived: Scalars['ID']
  markEventAsCertified: Scalars['ID']
  markEventAsDuplicate: Scalars['ID']
  markEventAsIssued: Scalars['ID']
  markEventAsNotDuplicate: Scalars['ID']
  markEventAsRegistered: Scalars['ID']
  markEventAsReinstated?: Maybe<Reinstated>
  markEventAsUnassigned?: Maybe<EventData>
  markEventAsValidated?: Maybe<Scalars['ID']>
  markEventAsVerified?: Maybe<EventData>
  markEventAsVoided: Scalars['ID']
  reactivateSystem?: Maybe<System>
  refreshSystemSecret?: Maybe<SystemSecret>
  registerSystem?: Maybe<SystemSecret>
  rejectEventCorrection: Scalars['ID']
  removeBookmarkedAdvancedSearch?: Maybe<BookMarkedSearches>
  requestEventCorrection: Scalars['ID']
  resendInvite?: Maybe<Scalars['String']>
  resetPasswordInvite?: Maybe<Scalars['String']>
  updatePermissions?: Maybe<System>
  updateRole: Response
  usernameReminder?: Maybe<Scalars['String']>
}

export type MutationActivateUserArgs = {
  password: Scalars['String']
  securityQNAs: Array<InputMaybe<SecurityQuestionAnswer>>
  userId: Scalars['String']
}

export type MutationApproveEventCorrectionArgs = {
  details: EventInput
  id: Scalars['ID']
}

export type MutationAuditUserArgs = {
  action: Scalars['String']
  comment?: InputMaybe<Scalars['String']>
  reason: Scalars['String']
  userId: Scalars['String']
}

export type MutationBookmarkAdvancedSearchArgs = {
  bookmarkSearchInput: BookmarkSearchInput
}

export type MutationChangeAvatarArgs = {
  avatar: AvatarInput
  userId: Scalars['String']
}

export type MutationChangeEmailArgs = {
  email: Scalars['String']
  nonce: Scalars['String']
  userId: Scalars['String']
  verifyCode: Scalars['String']
}

export type MutationChangePasswordArgs = {
  existingPassword: Scalars['String']
  password: Scalars['String']
  userId: Scalars['String']
}

export type MutationChangePhoneArgs = {
  nonce: Scalars['String']
  phoneNumber: Scalars['String']
  userId: Scalars['String']
  verifyCode: Scalars['String']
}

export type MutationCreateEventArgs = {
  details: EventInput
}

export type MutationCreateEventCorrectionArgs = {
  details: EventInput
  id: Scalars['ID']
}

export type MutationCreateOrUpdateUserArgs = {
  user: UserInput
}

export type MutationDeactivateSystemArgs = {
  clientId: Scalars['ID']
}

export type MutationDeleteSystemArgs = {
  clientId: Scalars['ID']
}

export type MutationMarkEventAsArchivedArgs = {
  comment?: InputMaybe<Scalars['String']>
  duplicateTrackingId?: InputMaybe<Scalars['String']>
  id: Scalars['ID']
  reason?: InputMaybe<Scalars['String']>
}

export type MutationMarkEventAsCertifiedArgs = {
  details: EventInput
  id: Scalars['ID']
}

export type MutationMarkEventAsDuplicateArgs = {
  comment?: InputMaybe<Scalars['String']>
  duplicateTrackingId?: InputMaybe<Scalars['String']>
  id: Scalars['ID']
  reason: Scalars['String']
}

export type MutationMarkEventAsIssuedArgs = {
  details: EventInput
  id: Scalars['ID']
}

export type MutationMarkEventAsNotDuplicateArgs = {
  id: Scalars['ID']
}

export type MutationMarkEventAsRegisteredArgs = {
  details: EventInput
  id: Scalars['ID']
}

export type MutationMarkEventAsReinstatedArgs = {
  id: Scalars['ID']
}

export type MutationMarkEventAsUnassignedArgs = {
  id: Scalars['ID']
}

export type MutationMarkEventAsValidatedArgs = {
  details: EventInput
  id: Scalars['ID']
}

export type MutationMarkEventAsVerifiedArgs = {
  details: EventInput
  id: Scalars['ID']
}

export type MutationMarkEventAsVoidedArgs = {
  comment: Scalars['String']
  id: Scalars['ID']
  reason: Scalars['String']
}

export type MutationReactivateSystemArgs = {
  clientId: Scalars['ID']
}

export type MutationRefreshSystemSecretArgs = {
  clientId: Scalars['String']
}

export type MutationRegisterSystemArgs = {
  system?: InputMaybe<SystemInput>
}

export type MutationRejectEventCorrectionArgs = {
  details: CorrectionRejectionInput
  id: Scalars['ID']
}

export type MutationRemoveBookmarkedAdvancedSearchArgs = {
  removeBookmarkedSearchInput: RemoveBookmarkedSeachInput
}

export type MutationRequestEventCorrectionArgs = {
  details: CorrectionInput
  id: Scalars['ID']
}

export type MutationResendInviteArgs = {
  userId: Scalars['String']
}

export type MutationResetPasswordInviteArgs = {
  userId: Scalars['String']
}

export type MutationUpdatePermissionsArgs = {
  setting: UpdatePermissionsInput
}

export type MutationUpdateRoleArgs = {
  systemRole?: InputMaybe<SystemRoleInput>
}

export type MutationUsernameReminderArgs = {
  userId: Scalars['String']
}

export type NotificationResult = {
  __typename?: 'NotificationResult'
  success: Scalars['Boolean']
}

export enum NotificationType {
  Email = 'EMAIL',
  Sms = 'SMS'
}

export type PaymentMetric = {
  __typename?: 'PaymentMetric'
  paymentType: Scalars['String']
  total: Scalars['Float']
}

export enum PaymentOutcomeType {
  Completed = 'COMPLETED',
  Error = 'ERROR',
  Partial = 'PARTIAL'
}

export enum PaymentType {
  Manual = 'MANUAL'
}

export type Query = {
  __typename?: 'Query'
  fetchEvent?: Maybe<EventData>
  fetchLocationWiseEventMetrics?: Maybe<Array<LocationWiseEstimationMetric>>
  fetchMonthWiseEventMetrics?: Maybe<Array<MonthWiseEstimationMetric>>
  fetchRecordDetailsForVerification?: Maybe<EventData>
  fetchRegistrationCountByStatus?: Maybe<RegistrationCountResult>
  fetchSystem?: Maybe<System>
  getDeclarationsStartedMetrics?: Maybe<DeclarationsStartedMetrics>
  getLocationStatistics?: Maybe<LocationStatisticsResponse>
  getRegistrationsListByFilter?: Maybe<MixedTotalMetricsResult>
  getSystemRoles?: Maybe<Array<SystemRole>>
  getTotalCertifications?: Maybe<Array<CertificationMetric>>
  getTotalCorrections?: Maybe<Array<CorrectionMetric>>
  getTotalMetrics?: Maybe<TotalMetricsResult>
  getTotalPayments?: Maybe<Array<PaymentMetric>>
  getUser?: Maybe<User>
  getUserAuditLog?: Maybe<UserAuditLogResultSet>
  getUserByEmail?: Maybe<User>
  getUserByMobile?: Maybe<User>
  getVSExports?: Maybe<TotalVsExport>
  hasChildLocation?: Maybe<Location>
  searchEvents: EventSearchResultSet
  searchFieldAgents?: Maybe<SearchFieldAgentResult>
  searchUsers?: Maybe<SearchUserResult>
  sendNotificationToAllUsers?: Maybe<NotificationResult>
  verifyPasswordById?: Maybe<VerifyPasswordResult>
}

export type QueryFetchEventArgs = {
  id: Scalars['ID']
}

export type QueryFetchLocationWiseEventMetricsArgs = {
  event: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
  timeEnd: Scalars['String']
  timeStart: Scalars['String']
}

export type QueryFetchMonthWiseEventMetricsArgs = {
  event: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
  timeEnd: Scalars['String']
  timeStart: Scalars['String']
}

export type QueryFetchRecordDetailsForVerificationArgs = {
  id: Scalars['String']
}

export type QueryFetchRegistrationCountByStatusArgs = {
  event?: InputMaybe<Event>
  locationId?: InputMaybe<Scalars['String']>
  status: Array<InputMaybe<Scalars['String']>>
}

export type QueryFetchSystemArgs = {
  clientId: Scalars['ID']
}

export type QueryGetDeclarationsStartedMetricsArgs = {
  locationId: Scalars['String']
  timeEnd: Scalars['String']
  timeStart: Scalars['String']
}

export type QueryGetLocationStatisticsArgs = {
  locationId?: InputMaybe<Scalars['String']>
  populationYear: Scalars['Int']
}

export type QueryGetRegistrationsListByFilterArgs = {
  event: Scalars['String']
  filterBy: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
  size: Scalars['Int']
  skip: Scalars['Int']
  timeEnd: Scalars['String']
  timeStart: Scalars['String']
}

export type QueryGetSystemRolesArgs = {
  active?: InputMaybe<Scalars['Boolean']>
  role?: InputMaybe<Scalars['String']>
  sortBy?: InputMaybe<Scalars['String']>
  sortOrder?: InputMaybe<Scalars['String']>
  title?: InputMaybe<Scalars['String']>
  value?: InputMaybe<ComparisonInput>
}

export type QueryGetTotalCertificationsArgs = {
  locationId?: InputMaybe<Scalars['String']>
  timeEnd: Scalars['String']
  timeStart: Scalars['String']
}

export type QueryGetTotalCorrectionsArgs = {
  event: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
  timeEnd: Scalars['String']
  timeStart: Scalars['String']
}

export type QueryGetTotalMetricsArgs = {
  event: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
  timeEnd: Scalars['String']
  timeStart: Scalars['String']
}

export type QueryGetTotalPaymentsArgs = {
  event: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
  timeEnd: Scalars['String']
  timeStart: Scalars['String']
}

export type QueryGetUserArgs = {
  userId?: InputMaybe<Scalars['String']>
}

export type QueryGetUserAuditLogArgs = {
  count: Scalars['Int']
  practitionerId: Scalars['String']
  skip?: InputMaybe<Scalars['Int']>
  timeEnd?: InputMaybe<Scalars['String']>
  timeStart?: InputMaybe<Scalars['String']>
}

export type QueryGetUserByEmailArgs = {
  email?: InputMaybe<Scalars['String']>
}

export type QueryGetUserByMobileArgs = {
  mobile?: InputMaybe<Scalars['String']>
}

export type QueryHasChildLocationArgs = {
  parentId: Scalars['String']
}

export type QuerySearchEventsArgs = {
  advancedSearchParameters: AdvancedSearchParametersInput
  count?: InputMaybe<Scalars['Int']>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<Scalars['String']>
  sortBy?: InputMaybe<Array<SortBy>>
  sortColumn?: InputMaybe<Scalars['String']>
  userId?: InputMaybe<Scalars['String']>
}

export type QuerySearchFieldAgentsArgs = {
  count?: InputMaybe<Scalars['Int']>
  event?: InputMaybe<Scalars['String']>
  language?: InputMaybe<Scalars['String']>
  locationId?: InputMaybe<Scalars['String']>
  primaryOfficeId?: InputMaybe<Scalars['String']>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<Scalars['String']>
  status?: InputMaybe<Scalars['String']>
  timeEnd: Scalars['String']
  timeStart: Scalars['String']
}

export type QuerySearchUsersArgs = {
  count?: InputMaybe<Scalars['Int']>
  email?: InputMaybe<Scalars['String']>
  locationId?: InputMaybe<Scalars['String']>
  mobile?: InputMaybe<Scalars['String']>
  primaryOfficeId?: InputMaybe<Scalars['String']>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<Scalars['String']>
  status?: InputMaybe<Scalars['String']>
  systemRole?: InputMaybe<Scalars['String']>
  username?: InputMaybe<Scalars['String']>
}

export type QuerySendNotificationToAllUsersArgs = {
  body: Scalars['String']
  locale: Scalars['String']
  subject: Scalars['String']
  type?: InputMaybe<NotificationType>
}

export type QueryVerifyPasswordByIdArgs = {
  id: Scalars['String']
  password: Scalars['String']
}

export enum RegAction {
  ApprovedCorrection = 'APPROVED_CORRECTION',
  Assigned = 'ASSIGNED',
  Corrected = 'CORRECTED',
  Downloaded = 'DOWNLOADED',
  FlaggedAsPotentialDuplicate = 'FLAGGED_AS_POTENTIAL_DUPLICATE',
  MarkedAsDuplicate = 'MARKED_AS_DUPLICATE',
  MarkedAsNotDuplicate = 'MARKED_AS_NOT_DUPLICATE',
  Reinstated = 'REINSTATED',
  RejectedCorrection = 'REJECTED_CORRECTION',
  RequestedCorrection = 'REQUESTED_CORRECTION',
  Unassigned = 'UNASSIGNED',
  Verified = 'VERIFIED',
  Viewed = 'VIEWED'
}

export enum RegStatus {
  Archived = 'ARCHIVED',
  Certified = 'CERTIFIED',
  CorrectionRequested = 'CORRECTION_REQUESTED',
  DeclarationUpdated = 'DECLARATION_UPDATED',
  Declared = 'DECLARED',
  InProgress = 'IN_PROGRESS',
  Issued = 'ISSUED',
  Registered = 'REGISTERED',
  Rejected = 'REJECTED',
  Validated = 'VALIDATED',
  WaitingValidation = 'WAITING_VALIDATION'
}

export type RegistrationCountResult = {
  __typename?: 'RegistrationCountResult'
  results: Array<Maybe<StatusWiseRegistrationCount>>
  total: Scalars['Int']
}

export type Reinstated = {
  __typename?: 'Reinstated'
  registrationStatus?: Maybe<RegStatus>
  taskEntryResourceID: Scalars['ID']
}

export type RemoveBookmarkedSeachInput = {
  searchId: Scalars['String']
  userId: Scalars['String']
}

export type Response = {
  __typename?: 'Response'
  roleIdMap: Scalars['Map']
}

export type Role = {
  __typename?: 'Role'
  _id: Scalars['ID']
  labels: Array<RoleLabel>
}

export type RoleInput = {
  _id?: InputMaybe<Scalars['ID']>
  labels: Array<LabelInput>
}

export type RoleLabel = {
  __typename?: 'RoleLabel'
  label: Scalars['String']
  lang: Scalars['String']
}

export type SearchFieldAgentResponse = {
  __typename?: 'SearchFieldAgentResponse'
  avatar?: Maybe<Avatar>
  averageTimeForDeclaredDeclarations?: Maybe<Scalars['Int']>
  creationDate?: Maybe<Scalars['String']>
  fullName?: Maybe<Scalars['String']>
  practitionerId?: Maybe<Scalars['String']>
  primaryOfficeId?: Maybe<Scalars['String']>
  role?: Maybe<Role>
  status?: Maybe<Status>
  totalNumberOfDeclarationStarted?: Maybe<Scalars['Int']>
  totalNumberOfInProgressAppStarted?: Maybe<Scalars['Int']>
  totalNumberOfRejectedDeclarations?: Maybe<Scalars['Int']>
}

export type SearchFieldAgentResult = {
  __typename?: 'SearchFieldAgentResult'
  results?: Maybe<Array<Maybe<SearchFieldAgentResponse>>>
  totalItems?: Maybe<Scalars['Int']>
}

export type SearchUserResult = {
  __typename?: 'SearchUserResult'
  results?: Maybe<Array<Maybe<User>>>
  totalItems?: Maybe<Scalars['Int']>
}

export type SecurityQuestionAnswer = {
  answer?: InputMaybe<Scalars['String']>
  questionKey?: InputMaybe<Scalars['String']>
}

export type Signature = {
  __typename?: 'Signature'
  data?: Maybe<Scalars['String']>
  type?: Maybe<Scalars['String']>
}

export type SignatureInput = {
  data: Scalars['String']
  type?: InputMaybe<Scalars['String']>
}

export type SortBy = {
  column: Scalars['String']
  order: Scalars['String']
}

export enum Status {
  Active = 'active',
  Deactivated = 'deactivated',
  Disabled = 'disabled',
  Pending = 'pending'
}

export type StatusWiseRegistrationCount = {
  __typename?: 'StatusWiseRegistrationCount'
  count: Scalars['Int']
  status: Scalars['String']
}

export type System = {
  __typename?: 'System'
  _id: Scalars['ID']
  clientId: Scalars['ID']
  integratingSystemType?: Maybe<IntegratingSystemType>
  name: Scalars['String']
  settings?: Maybe<SystemSettings>
  shaSecret: Scalars['ID']
  status: SystemStatus
  type: SystemType
}

export type SystemInput = {
  integratingSystemType?: InputMaybe<IntegratingSystemType>
  name: Scalars['String']
  settings?: InputMaybe<SystemSettingsInput>
  type: SystemType
}

export type SystemRole = {
  __typename?: 'SystemRole'
  active: Scalars['Boolean']
  id: Scalars['ID']
  roles: Array<Role>
  value: SystemRoleType
}

export type SystemRoleInput = {
  active?: InputMaybe<Scalars['Boolean']>
  id: Scalars['ID']
  roles?: InputMaybe<Array<RoleInput>>
  value?: InputMaybe<Scalars['String']>
}

export enum SystemRoleType {
  FieldAgent = 'FIELD_AGENT',
  LocalRegistrar = 'LOCAL_REGISTRAR',
  LocalSystemAdmin = 'LOCAL_SYSTEM_ADMIN',
  NationalRegistrar = 'NATIONAL_REGISTRAR',
  NationalSystemAdmin = 'NATIONAL_SYSTEM_ADMIN',
  PerformanceManagement = 'PERFORMANCE_MANAGEMENT',
  RegistrationAgent = 'REGISTRATION_AGENT'
}

export type SystemSecret = {
  __typename?: 'SystemSecret'
  clientSecret: Scalars['ID']
  system: System
}

export type SystemSettings = {
  __typename?: 'SystemSettings'
  dailyQuota?: Maybe<Scalars['Int']>
  openIdProviderBaseUrl?: Maybe<Scalars['String']>
  openIdProviderClaims?: Maybe<Scalars['String']>
  openIdProviderClientId?: Maybe<Scalars['String']>
  webhook?: Maybe<Array<WebhookPermission>>
}

export type SystemSettingsInput = {
  dailyQuota?: InputMaybe<Scalars['Int']>
  webhook?: InputMaybe<Array<InputMaybe<WebhookInput>>>
}

export enum SystemStatus {
  Active = 'active',
  Deactivated = 'deactivated'
}

export enum SystemType {
  Health = 'HEALTH',
  NationalId = 'NATIONAL_ID',
  RecordSearch = 'RECORD_SEARCH',
  Webhook = 'WEBHOOK'
}

export enum TelecomSystem {
  Email = 'email',
  Fax = 'fax',
  Other = 'other',
  Pager = 'pager',
  Phone = 'phone',
  Sms = 'sms',
  Url = 'url'
}

export enum TelecomUse {
  Home = 'home',
  Mobile = 'mobile',
  Old = 'old',
  Temp = 'temp',
  Work = 'work'
}

export type TotalMetricsByLocation = {
  __typename?: 'TotalMetricsByLocation'
  results: Array<EventMetricsByLocation>
  total?: Maybe<Scalars['Int']>
}

export type TotalMetricsByRegistrar = {
  __typename?: 'TotalMetricsByRegistrar'
  results: Array<EventMetricsByRegistrar>
  total?: Maybe<Scalars['Int']>
}

export type TotalMetricsByTime = {
  __typename?: 'TotalMetricsByTime'
  results: Array<EventMetricsByTime>
  total?: Maybe<Scalars['Int']>
}

export type TotalMetricsResult = {
  __typename?: 'TotalMetricsResult'
  estimated: Estimation
  results: Array<EventMetrics>
}

export type TotalVsExport = {
  __typename?: 'TotalVSExport'
  results?: Maybe<Array<VsExport>>
}

export type UpdatePermissionsInput = {
  clientId: Scalars['String']
  webhook: Array<WebhookInput>
}

export type User = {
  __typename?: 'User'
  avatar?: Maybe<Avatar>
  creationDate: Scalars['String']
  device?: Maybe<Scalars['String']>
  email?: Maybe<Scalars['String']>
  id: Scalars['ID']
  identifier?: Maybe<Identifier>
  localRegistrar?: Maybe<LocalRegistrar>
  mobile?: Maybe<Scalars['String']>
  name: Array<HumanName>
  practitionerId: Scalars['String']
  primaryOffice?: Maybe<Location>
  role: Role
  searches?: Maybe<Array<BookmarkedSeachItem>>
  signature?: Maybe<Signature>
  status: Status
  systemRole: SystemRoleType
  underInvestigation?: Maybe<Scalars['Boolean']>
  userMgntUserID: Scalars['ID']
  username?: Maybe<Scalars['String']>
}

export type UserAuditLogItem = AuditLogItemBase & {
  __typename?: 'UserAuditLogItem'
  action: Scalars['String']
  ipAddress: Scalars['String']
  practitionerId: Scalars['String']
  time: Scalars['String']
  userAgent: Scalars['String']
}

export type UserAuditLogItemWithComposition = AuditLogItemBase & {
  __typename?: 'UserAuditLogItemWithComposition'
  action: Scalars['String']
  data: AdditionalIdWithCompositionId
  ipAddress: Scalars['String']
  practitionerId: Scalars['String']
  time: Scalars['String']
  userAgent: Scalars['String']
}

export type UserAuditLogResultItem =
  | UserAuditLogItem
  | UserAuditLogItemWithComposition

export type UserAuditLogResultSet = {
  __typename?: 'UserAuditLogResultSet'
  results: Array<UserAuditLogResultItem>
  total: Scalars['Int']
}

export type UserIdentifierInput = {
  system?: InputMaybe<Scalars['String']>
  use?: InputMaybe<Scalars['String']>
  value?: InputMaybe<Scalars['String']>
}

export type UserInput = {
  device?: InputMaybe<Scalars['String']>
  email?: InputMaybe<Scalars['String']>
  id?: InputMaybe<Scalars['ID']>
  identifier?: InputMaybe<Array<InputMaybe<UserIdentifierInput>>>
  mobile?: InputMaybe<Scalars['String']>
  name: Array<HumanNameInput>
  password?: InputMaybe<Scalars['String']>
  primaryOffice?: InputMaybe<Scalars['String']>
  role?: InputMaybe<Scalars['String']>
  signature?: InputMaybe<SignatureInput>
  status?: InputMaybe<Status>
  systemRole: SystemRoleType
  username?: InputMaybe<Scalars['String']>
}

export type VsExport = {
  __typename?: 'VSExport'
  createdOn: Scalars['Date']
  endDate: Scalars['Date']
  event: Scalars['String']
  fileSize: Scalars['String']
  startDate: Scalars['Date']
  url: Scalars['String']
}

export type VerifyPasswordResult = {
  __typename?: 'VerifyPasswordResult'
  id?: Maybe<Scalars['String']>
  mobile?: Maybe<Scalars['String']>
  scrope?: Maybe<Array<Maybe<Scalars['String']>>>
  status?: Maybe<Scalars['String']>
  username?: Maybe<Scalars['String']>
}

export type WebhookInput = {
  event: Scalars['String']
  permissions: Array<InputMaybe<Scalars['String']>>
}

export type WebhookPermission = {
  __typename?: 'WebhookPermission'
  event: Scalars['String']
  permissions: Array<Scalars['String']>
}

export type CreateEventCorrectionMutationVariables = Exact<{
  id: Scalars['ID']
  details: EventInput
}>

export type CreateEventCorrectionMutation = {
  __typename?: 'Mutation'
  createEventCorrection: string
}

export type ApproveEventCorrectionMutationVariables = Exact<{
  id: Scalars['ID']
  details: EventInput
}>

export type ApproveEventCorrectionMutation = {
  __typename?: 'Mutation'
  approveEventCorrection: string
}

export type RequestEventCorrectionMutationVariables = Exact<{
  id: Scalars['ID']
  details: CorrectionInput
}>

export type RequestEventCorrectionMutation = {
  __typename?: 'Mutation'
  requestEventCorrection: string
}

export type RejectEventCorrectionMutationVariables = Exact<{
  id: Scalars['ID']
  details: CorrectionRejectionInput
}>

export type RejectEventCorrectionMutation = {
  __typename?: 'Mutation'
  rejectEventCorrection: string
}

export type CreateOrUpdateUserMutationVariables = Exact<{
  user: UserInput
}>

export type CreateOrUpdateUserMutation = {
  __typename?: 'Mutation'
  createOrUpdateUser: { __typename?: 'User'; username?: string | null }
}

export type GetSystemRolesQueryVariables = Exact<{
  value?: InputMaybe<ComparisonInput>
}>

export type GetSystemRolesQuery = {
  __typename?: 'Query'
  getSystemRoles?: Array<{
    __typename?: 'SystemRole'
    id: string
    value: SystemRoleType
    roles: Array<{
      __typename?: 'Role'
      _id: string
      labels: Array<{ __typename?: 'RoleLabel'; lang: string; label: string }>
    }>
  }> | null
}

export type UpdateRoleMutationVariables = Exact<{
  systemRole?: InputMaybe<SystemRoleInput>
}>

export type UpdateRoleMutation = {
  __typename?: 'Mutation'
  updateRole: { __typename?: 'Response'; roleIdMap: any }
}

export type AdvancedSeachParametersFragment = {
  __typename?: 'AdvancedSeachParameters'
  event?: string | null
  name?: string | null
  registrationStatuses?: Array<string | null> | null
  dateOfEvent?: string | null
  dateOfEventStart?: string | null
  dateOfEventEnd?: string | null
  timePeriodFrom?: string | null
  contactNumber?: string | null
  nationalId?: string | null
  registrationNumber?: string | null
  trackingId?: string | null
  dateOfRegistration?: string | null
  dateOfRegistrationStart?: string | null
  dateOfRegistrationEnd?: string | null
  declarationLocationId?: string | null
  declarationJurisdictionId?: string | null
  eventLocationId?: string | null
  eventCountry?: string | null
  eventLocationLevel1?: string | null
  eventLocationLevel2?: string | null
  eventLocationLevel3?: string | null
  eventLocationLevel4?: string | null
  eventLocationLevel5?: string | null
  childFirstNames?: string | null
  childLastName?: string | null
  childDoB?: string | null
  childDoBStart?: string | null
  childDoBEnd?: string | null
  childGender?: string | null
  deceasedFirstNames?: string | null
  deceasedFamilyName?: string | null
  deceasedGender?: string | null
  deceasedDoB?: string | null
  deceasedDoBStart?: string | null
  deceasedDoBEnd?: string | null
  deceasedIdentifier?: string | null
  motherFirstNames?: string | null
  motherFamilyName?: string | null
  motherDoB?: string | null
  motherDoBStart?: string | null
  motherDoBEnd?: string | null
  motherIdentifier?: string | null
  fatherFirstNames?: string | null
  fatherFamilyName?: string | null
  fatherDoB?: string | null
  fatherDoBStart?: string | null
  fatherDoBEnd?: string | null
  fatherIdentifier?: string | null
  informantFirstNames?: string | null
  informantFamilyName?: string | null
  informantDoB?: string | null
  informantDoBStart?: string | null
  informantDoBEnd?: string | null
  informantIdentifier?: string | null
  compositionType?: Array<string | null> | null
}

export type BookmarkAdvancedSearchMutationVariables = Exact<{
  bookmarkSearchInput: BookmarkSearchInput
}>

export type BookmarkAdvancedSearchMutation = {
  __typename?: 'Mutation'
  bookmarkAdvancedSearch?: {
    __typename?: 'BookMarkedSearches'
    searchList?: Array<{
      __typename?: 'BookmarkedSeachItem'
      searchId: string
      name: string
      parameters: {
        __typename?: 'AdvancedSeachParameters'
        event?: string | null
        name?: string | null
        registrationStatuses?: Array<string | null> | null
        dateOfEvent?: string | null
        dateOfEventStart?: string | null
        dateOfEventEnd?: string | null
        timePeriodFrom?: string | null
        contactNumber?: string | null
        nationalId?: string | null
        registrationNumber?: string | null
        trackingId?: string | null
        dateOfRegistration?: string | null
        dateOfRegistrationStart?: string | null
        dateOfRegistrationEnd?: string | null
        declarationLocationId?: string | null
        declarationJurisdictionId?: string | null
        eventLocationId?: string | null
        eventCountry?: string | null
        eventLocationLevel1?: string | null
        eventLocationLevel2?: string | null
        eventLocationLevel3?: string | null
        eventLocationLevel4?: string | null
        eventLocationLevel5?: string | null
        childFirstNames?: string | null
        childLastName?: string | null
        childDoB?: string | null
        childDoBStart?: string | null
        childDoBEnd?: string | null
        childGender?: string | null
        deceasedFirstNames?: string | null
        deceasedFamilyName?: string | null
        deceasedGender?: string | null
        deceasedDoB?: string | null
        deceasedDoBStart?: string | null
        deceasedDoBEnd?: string | null
        deceasedIdentifier?: string | null
        motherFirstNames?: string | null
        motherFamilyName?: string | null
        motherDoB?: string | null
        motherDoBStart?: string | null
        motherDoBEnd?: string | null
        motherIdentifier?: string | null
        fatherFirstNames?: string | null
        fatherFamilyName?: string | null
        fatherDoB?: string | null
        fatherDoBStart?: string | null
        fatherDoBEnd?: string | null
        fatherIdentifier?: string | null
        informantFirstNames?: string | null
        informantFamilyName?: string | null
        informantDoB?: string | null
        informantDoBStart?: string | null
        informantDoBEnd?: string | null
        informantIdentifier?: string | null
        compositionType?: Array<string | null> | null
      }
    }> | null
  } | null
}

export type RemoveBookmarkedAdvancedSearchMutationVariables = Exact<{
  removeBookmarkedSearchInput: RemoveBookmarkedSeachInput
}>

export type RemoveBookmarkedAdvancedSearchMutation = {
  __typename?: 'Mutation'
  removeBookmarkedAdvancedSearch?: {
    __typename?: 'BookMarkedSearches'
    searchList?: Array<{
      __typename?: 'BookmarkedSeachItem'
      searchId: string
      name: string
      parameters: {
        __typename?: 'AdvancedSeachParameters'
        event?: string | null
        name?: string | null
        registrationStatuses?: Array<string | null> | null
        dateOfEvent?: string | null
        dateOfEventStart?: string | null
        dateOfEventEnd?: string | null
        timePeriodFrom?: string | null
        contactNumber?: string | null
        nationalId?: string | null
        registrationNumber?: string | null
        trackingId?: string | null
        dateOfRegistration?: string | null
        dateOfRegistrationStart?: string | null
        dateOfRegistrationEnd?: string | null
        declarationLocationId?: string | null
        declarationJurisdictionId?: string | null
        eventLocationId?: string | null
        eventCountry?: string | null
        eventLocationLevel1?: string | null
        eventLocationLevel2?: string | null
        eventLocationLevel3?: string | null
        eventLocationLevel4?: string | null
        eventLocationLevel5?: string | null
        childFirstNames?: string | null
        childLastName?: string | null
        childDoB?: string | null
        childDoBStart?: string | null
        childDoBEnd?: string | null
        childGender?: string | null
        deceasedFirstNames?: string | null
        deceasedFamilyName?: string | null
        deceasedGender?: string | null
        deceasedDoB?: string | null
        deceasedDoBStart?: string | null
        deceasedDoBEnd?: string | null
        deceasedIdentifier?: string | null
        motherFirstNames?: string | null
        motherFamilyName?: string | null
        motherDoB?: string | null
        motherDoBStart?: string | null
        motherDoBEnd?: string | null
        motherIdentifier?: string | null
        fatherFirstNames?: string | null
        fatherFamilyName?: string | null
        fatherDoB?: string | null
        fatherDoBStart?: string | null
        fatherDoBEnd?: string | null
        fatherIdentifier?: string | null
        informantFirstNames?: string | null
        informantFamilyName?: string | null
        informantDoB?: string | null
        informantDoBStart?: string | null
        informantDoBEnd?: string | null
        informantIdentifier?: string | null
        compositionType?: Array<string | null> | null
      }
    }> | null
  } | null
}

export type FetchUserQueryVariables = Exact<{
  userId: Scalars['String']
}>

export type FetchUserQuery = {
  __typename?: 'Query'
  getUser?: {
    __typename?: 'User'
    id: string
    userMgntUserID: string
    creationDate: string
    username?: string | null
    practitionerId: string
    mobile?: string | null
    email?: string | null
    systemRole: SystemRoleType
    status: Status
    role: {
      __typename?: 'Role'
      _id: string
      labels: Array<{ __typename?: 'RoleLabel'; lang: string; label: string }>
    }
    name: Array<{
      __typename?: 'HumanName'
      use?: string | null
      firstNames?: string | null
      familyName?: string | null
    }>
    primaryOffice?: {
      __typename?: 'Location'
      id: string
      name?: string | null
      alias?: Array<string> | null
      status?: string | null
    } | null
    localRegistrar?: {
      __typename?: 'LocalRegistrar'
      role: SystemRoleType
      name: Array<{
        __typename?: 'HumanName'
        use?: string | null
        firstNames?: string | null
        familyName?: string | null
      } | null>
      signature?: {
        __typename?: 'Signature'
        data?: string | null
        type?: string | null
      } | null
    } | null
    avatar?: { __typename?: 'Avatar'; type: string; data: string } | null
    searches?: Array<{
      __typename?: 'BookmarkedSeachItem'
      searchId: string
      name: string
      parameters: {
        __typename?: 'AdvancedSeachParameters'
        event?: string | null
        name?: string | null
        registrationStatuses?: Array<string | null> | null
        dateOfEvent?: string | null
        dateOfEventStart?: string | null
        dateOfEventEnd?: string | null
        timePeriodFrom?: string | null
        contactNumber?: string | null
        nationalId?: string | null
        registrationNumber?: string | null
        trackingId?: string | null
        dateOfRegistration?: string | null
        dateOfRegistrationStart?: string | null
        dateOfRegistrationEnd?: string | null
        declarationLocationId?: string | null
        declarationJurisdictionId?: string | null
        eventLocationId?: string | null
        eventCountry?: string | null
        eventLocationLevel1?: string | null
        eventLocationLevel2?: string | null
        eventLocationLevel3?: string | null
        eventLocationLevel4?: string | null
        eventLocationLevel5?: string | null
        childFirstNames?: string | null
        childLastName?: string | null
        childDoB?: string | null
        childDoBStart?: string | null
        childDoBEnd?: string | null
        childGender?: string | null
        deceasedFirstNames?: string | null
        deceasedFamilyName?: string | null
        deceasedGender?: string | null
        deceasedDoB?: string | null
        deceasedDoBStart?: string | null
        deceasedDoBEnd?: string | null
        deceasedIdentifier?: string | null
        motherFirstNames?: string | null
        motherFamilyName?: string | null
        motherDoB?: string | null
        motherDoBStart?: string | null
        motherDoBEnd?: string | null
        motherIdentifier?: string | null
        fatherFirstNames?: string | null
        fatherFamilyName?: string | null
        fatherDoB?: string | null
        fatherDoBStart?: string | null
        fatherDoBEnd?: string | null
        fatherIdentifier?: string | null
        informantFirstNames?: string | null
        informantFamilyName?: string | null
        informantDoB?: string | null
        informantDoBStart?: string | null
        informantDoBEnd?: string | null
        informantIdentifier?: string | null
        compositionType?: Array<string | null> | null
      }
    }> | null
  } | null
}

export type SearchEventsQueryVariables = Exact<{
  advancedSearchParameters: AdvancedSearchParametersInput
  sort?: InputMaybe<Scalars['String']>
  count?: InputMaybe<Scalars['Int']>
  skip?: InputMaybe<Scalars['Int']>
  sortColumn?: InputMaybe<Scalars['String']>
}>

export type SearchEventsQuery = {
  __typename?: 'Query'
  searchEvents: {
    __typename?: 'EventSearchResultSet'
    totalItems: number
    results: Array<{
      __typename?: 'IndexedEvent'
      id: string
      type: string
      createdAt: any
      createdAtLocation: string
      modifiedAt: string
      status: string
    }>
  }
}

export type ResendInviteMutationVariables = Exact<{
  userId: Scalars['String']
}>

export type ResendInviteMutation = {
  __typename?: 'Mutation'
  resendInvite?: string | null
}

export type UsernameReminderMutationVariables = Exact<{
  userId: Scalars['String']
}>

export type UsernameReminderMutation = {
  __typename?: 'Mutation'
  usernameReminder?: string | null
}

export type ResetPasswordInviteMutationVariables = Exact<{
  userId: Scalars['String']
}>

export type ResetPasswordInviteMutation = {
  __typename?: 'Mutation'
  resetPasswordInvite?: string | null
}

export type SearchUsersQueryVariables = Exact<{
  count?: InputMaybe<Scalars['Int']>
  skip?: InputMaybe<Scalars['Int']>
  primaryOfficeId?: InputMaybe<Scalars['String']>
}>

export type SearchUsersQuery = {
  __typename?: 'Query'
  searchUsers?: {
    __typename?: 'SearchUserResult'
    totalItems?: number | null
    results?: Array<{
      __typename?: 'User'
      id: string
      username?: string | null
      systemRole: SystemRoleType
      mobile?: string | null
      email?: string | null
      status: Status
      underInvestigation?: boolean | null
      name: Array<{
        __typename?: 'HumanName'
        use?: string | null
        firstNames?: string | null
        familyName?: string | null
      }>
      role: { __typename?: 'Role'; _id: string }
      avatar?: { __typename?: 'Avatar'; type: string; data: string } | null
    } | null> | null
  } | null
}

export type GetUserAuditLogQueryVariables = Exact<{
  practitionerId: Scalars['String']
  count: Scalars['Int']
  skip: Scalars['Int']
  timeStart?: InputMaybe<Scalars['String']>
  timeEnd?: InputMaybe<Scalars['String']>
}>

export type GetUserAuditLogQuery = {
  __typename?: 'Query'
  getUserAuditLog?: {
    __typename?: 'UserAuditLogResultSet'
    total: number
    results: Array<
      | {
          __typename?: 'UserAuditLogItem'
          time: string
          userAgent: string
          practitionerId: string
          ipAddress: string
          action: string
        }
      | {
          __typename?: 'UserAuditLogItemWithComposition'
          time: string
          userAgent: string
          practitionerId: string
          ipAddress: string
          action: string
          data: {
            __typename?: 'AdditionalIdWithCompositionId'
            compositionId: string
            trackingId: string
          }
        }
    >
  } | null
}

export type GetUserQueryVariables = Exact<{
  userId?: InputMaybe<Scalars['String']>
}>

export type GetUserQuery = {
  __typename?: 'Query'
  getUser?: {
    __typename?: 'User'
    id: string
    username?: string | null
    mobile?: string | null
    email?: string | null
    systemRole: SystemRoleType
    status: Status
    underInvestigation?: boolean | null
    practitionerId: string
    creationDate: string
    device?: string | null
    name: Array<{
      __typename?: 'HumanName'
      use?: string | null
      firstNames?: string | null
      familyName?: string | null
    }>
    identifier?: {
      __typename?: 'Identifier'
      system?: string | null
      value?: string | null
    } | null
    role: {
      __typename?: 'Role'
      _id: string
      labels: Array<{ __typename?: 'RoleLabel'; lang: string; label: string }>
    }
    primaryOffice?: {
      __typename?: 'Location'
      id: string
      name?: string | null
      alias?: Array<string> | null
    } | null
    signature?: {
      __typename?: 'Signature'
      type?: string | null
      data?: string | null
    } | null
    avatar?: { __typename?: 'Avatar'; type: string; data: string } | null
  } | null
}

export type AuditUserMutationVariables = Exact<{
  userId: Scalars['String']
  action: Scalars['String']
  reason: Scalars['String']
  comment?: InputMaybe<Scalars['String']>
}>

export type AuditUserMutation = {
  __typename?: 'Mutation'
  auditUser?: string | null
}

export type VerifyPasswordByIdQueryVariables = Exact<{
  id: Scalars['String']
  password: Scalars['String']
}>

export type VerifyPasswordByIdQuery = {
  __typename?: 'Query'
  verifyPasswordById?: {
    __typename?: 'VerifyPasswordResult'
    id?: string | null
    username?: string | null
  } | null
}

export type CreateEventMutationVariables = Exact<{
  details: EventInput
}>

export type CreateEventMutation = {
  __typename?: 'Mutation'
  createEvent: {
    __typename?: 'CreatedIds'
    trackingId?: string | null
    compositionId?: string | null
    isPotentiallyDuplicate?: boolean | null
  }
}

export type MarkEventAsValidatedMutationVariables = Exact<{
  id: Scalars['ID']
  details: EventInput
}>

export type MarkEventAsValidatedMutation = {
  __typename?: 'Mutation'
  markEventAsValidated?: string | null
}

export type MarkEventAsRegisteredMutationVariables = Exact<{
  id: Scalars['ID']
  details: EventInput
}>

export type MarkEventAsRegisteredMutation = {
  __typename?: 'Mutation'
  markEventAsRegistered: string
}

export type MarkEventAsVoidedMutationVariables = Exact<{
  id: Scalars['ID']
  reason: Scalars['String']
  comment: Scalars['String']
}>

export type MarkEventAsVoidedMutation = {
  __typename?: 'Mutation'
  markEventAsVoided: string
}

export type MarkEventAsArchivedMutationVariables = Exact<{
  id: Scalars['ID']
  reason?: InputMaybe<Scalars['String']>
  comment?: InputMaybe<Scalars['String']>
  duplicateTrackingId?: InputMaybe<Scalars['String']>
}>

export type MarkEventAsArchivedMutation = {
  __typename?: 'Mutation'
  markEventAsArchived: string
}

export type MarkEventAsCertifiedMutationVariables = Exact<{
  id: Scalars['ID']
  details: EventInput
}>

export type MarkEventAsCertifiedMutation = {
  __typename?: 'Mutation'
  markEventAsCertified: string
}

export type MarkEventAsIssuedMutationVariables = Exact<{
  id: Scalars['ID']
  details: EventInput
}>

export type MarkEventAsIssuedMutation = {
  __typename?: 'Mutation'
  markEventAsIssued: string
}

export type SubmitMutationMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type SubmitMutationMutation = {
  __typename?: 'Mutation'
  markEventAsUnassigned?: { __typename?: 'EventData'; id: string } | null
}

export type MarkEventAsDuplicateMutationVariables = Exact<{
  id: Scalars['ID']
  reason: Scalars['String']
  comment?: InputMaybe<Scalars['String']>
  duplicateTrackingId?: InputMaybe<Scalars['String']>
}>

export type MarkEventAsDuplicateMutation = {
  __typename?: 'Mutation'
  markEventAsDuplicate: string
}

export type FetchBirthRegistrationForReviewQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type FetchBirthRegistrationForReviewQuery = {
  __typename?: 'Query'
  fetchEvent?: {
    __typename?: 'EventData'
    id: string
    actions: Array<{
      __typename?: 'Action'
      fields: Array<{ __typename?: 'Field'; fieldId: string; value: string }>
    }>
  } | null
}

export type FetchBirthRegistrationForCertificateQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type FetchBirthRegistrationForCertificateQuery = {
  __typename?: 'Query'
  fetchEvent?: {
    __typename?: 'EventData'
    id: string
    actions: Array<{
      __typename?: 'Action'
      fields: Array<{ __typename?: 'Field'; fieldId: string; value: string }>
    }>
  } | null
}

export type FetchDeathRegistrationForReviewQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type FetchDeathRegistrationForReviewQuery = {
  __typename?: 'Query'
  fetchEvent?: {
    __typename?: 'EventData'
    id: string
    actions: Array<{
      __typename?: 'Action'
      fields: Array<{ __typename?: 'Field'; fieldId: string; value: string }>
    }>
  } | null
}

export type FetchDeathRegistrationForCertificationQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type FetchDeathRegistrationForCertificationQuery = {
  __typename?: 'Query'
  fetchEvent?: {
    __typename?: 'EventData'
    id: string
    actions: Array<{
      __typename?: 'Action'
      fields: Array<{ __typename?: 'Field'; fieldId: string; value: string }>
    }>
  } | null
}

export type FetchMarriageRegistrationForReviewQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type FetchMarriageRegistrationForReviewQuery = {
  __typename?: 'Query'
  fetchEvent?: {
    __typename?: 'EventData'
    id: string
    actions: Array<{
      __typename?: 'Action'
      fields: Array<{ __typename?: 'Field'; fieldId: string; value: string }>
    }>
  } | null
}

export type FetchMarriageRegistrationForCertificateQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type FetchMarriageRegistrationForCertificateQuery = {
  __typename?: 'Query'
  fetchEvent?: {
    __typename?: 'EventData'
    id: string
    actions: Array<{
      __typename?: 'Action'
      fields: Array<{ __typename?: 'Field'; fieldId: string; value: string }>
    }>
  } | null
}

export type MarkEventAsNotDuplicateMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type MarkEventAsNotDuplicateMutation = {
  __typename?: 'Mutation'
  markEventAsNotDuplicate: string
}

export type EventSearchFieldsFragment = {
  __typename?: 'IndexedEvent'
  id: string
  type: string
  status: string
  createdAt: any
  modifiedAt: string
  assignedTo?: {
    __typename?: 'AssignmentData'
    practitionerId: string
    firstName: string
    lastName: string
    officeName: string
    avatarURL: string
  } | null
}

export type RegistrationHomeQueryVariables = Exact<{
  declarationLocationId: Scalars['String']
  pageSize?: InputMaybe<Scalars['Int']>
  inProgressSkip?: InputMaybe<Scalars['Int']>
  healthSystemSkip?: InputMaybe<Scalars['Int']>
  reviewStatuses?: InputMaybe<
    Array<InputMaybe<Scalars['String']>> | InputMaybe<Scalars['String']>
  >
  reviewSkip?: InputMaybe<Scalars['Int']>
  rejectSkip?: InputMaybe<Scalars['Int']>
  approvalSkip?: InputMaybe<Scalars['Int']>
  externalValidationSkip?: InputMaybe<Scalars['Int']>
  printSkip?: InputMaybe<Scalars['Int']>
  issueSkip?: InputMaybe<Scalars['Int']>
}>

export type RegistrationHomeQuery = {
  __typename?: 'Query'
  inProgressTab: {
    __typename?: 'EventSearchResultSet'
    totalItems: number
    results: Array<{
      __typename?: 'IndexedEvent'
      id: string
      type: string
      status: string
      createdAt: any
      modifiedAt: string
      assignedTo?: {
        __typename?: 'AssignmentData'
        practitionerId: string
        firstName: string
        lastName: string
        officeName: string
        avatarURL: string
      } | null
    }>
  }
  notificationTab: {
    __typename?: 'EventSearchResultSet'
    totalItems: number
    results: Array<{
      __typename?: 'IndexedEvent'
      id: string
      type: string
      status: string
      createdAt: any
      modifiedAt: string
      assignedTo?: {
        __typename?: 'AssignmentData'
        practitionerId: string
        firstName: string
        lastName: string
        officeName: string
        avatarURL: string
      } | null
    }>
  }
  reviewTab: {
    __typename?: 'EventSearchResultSet'
    totalItems: number
    results: Array<{
      __typename?: 'IndexedEvent'
      id: string
      type: string
      status: string
      createdAt: any
      modifiedAt: string
      assignedTo?: {
        __typename?: 'AssignmentData'
        practitionerId: string
        firstName: string
        lastName: string
        officeName: string
        avatarURL: string
      } | null
    }>
  }
  rejectTab: {
    __typename?: 'EventSearchResultSet'
    totalItems: number
    results: Array<{
      __typename?: 'IndexedEvent'
      id: string
      type: string
      status: string
      createdAt: any
      modifiedAt: string
      assignedTo?: {
        __typename?: 'AssignmentData'
        practitionerId: string
        firstName: string
        lastName: string
        officeName: string
        avatarURL: string
      } | null
    }>
  }
  approvalTab: {
    __typename?: 'EventSearchResultSet'
    totalItems: number
    results: Array<{
      __typename?: 'IndexedEvent'
      id: string
      type: string
      status: string
      createdAt: any
      modifiedAt: string
      assignedTo?: {
        __typename?: 'AssignmentData'
        practitionerId: string
        firstName: string
        lastName: string
        officeName: string
        avatarURL: string
      } | null
    }>
  }
  externalValidationTab: {
    __typename?: 'EventSearchResultSet'
    totalItems: number
    results: Array<{
      __typename?: 'IndexedEvent'
      id: string
      type: string
      status: string
      createdAt: any
      modifiedAt: string
      assignedTo?: {
        __typename?: 'AssignmentData'
        practitionerId: string
        firstName: string
        lastName: string
        officeName: string
        avatarURL: string
      } | null
    }>
  }
  printTab: {
    __typename?: 'EventSearchResultSet'
    totalItems: number
    results: Array<{
      __typename?: 'IndexedEvent'
      id: string
      type: string
      status: string
      createdAt: any
      modifiedAt: string
      assignedTo?: {
        __typename?: 'AssignmentData'
        practitionerId: string
        firstName: string
        lastName: string
        officeName: string
        avatarURL: string
      } | null
    }>
  }
  issueTab: {
    __typename?: 'EventSearchResultSet'
    totalItems: number
    results: Array<{
      __typename?: 'IndexedEvent'
      id: string
      type: string
      status: string
      createdAt: any
      modifiedAt: string
      assignedTo?: {
        __typename?: 'AssignmentData'
        practitionerId: string
        firstName: string
        lastName: string
        officeName: string
        avatarURL: string
      } | null
    }>
  }
}

export type FieldAgentHomeQueryVariables = Exact<{
  userId?: InputMaybe<Scalars['String']>
  declarationLocationId: Scalars['String']
  pageSize?: InputMaybe<Scalars['Int']>
  reviewSkip?: InputMaybe<Scalars['Int']>
  rejectSkip?: InputMaybe<Scalars['Int']>
}>

export type FieldAgentHomeQuery = {
  __typename?: 'Query'
  reviewTab: {
    __typename?: 'EventSearchResultSet'
    totalItems: number
    results: Array<{
      __typename?: 'IndexedEvent'
      id: string
      type: string
      status: string
      createdAt: any
      modifiedAt: string
      assignedTo?: {
        __typename?: 'AssignmentData'
        practitionerId: string
        firstName: string
        lastName: string
        officeName: string
        avatarURL: string
      } | null
    }>
  }
  rejectTab: {
    __typename?: 'EventSearchResultSet'
    totalItems: number
    results: Array<{
      __typename?: 'IndexedEvent'
      id: string
      type: string
      status: string
      createdAt: any
      modifiedAt: string
      assignedTo?: {
        __typename?: 'AssignmentData'
        practitionerId: string
        firstName: string
        lastName: string
        officeName: string
        avatarURL: string
      } | null
    }>
  }
}

export type MarkEventAsReinstatedMutationVariables = Exact<{
  id: Scalars['ID']
}>

export type MarkEventAsReinstatedMutation = {
  __typename?: 'Mutation'
  markEventAsReinstated?: {
    __typename?: 'Reinstated'
    taskEntryResourceID: string
    registrationStatus?: RegStatus | null
  } | null
}

export type FetchDeclarationShortInfoQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type FetchDeclarationShortInfoQuery = {
  __typename?: 'Query'
  fetchEvent?: {
    __typename?: 'EventData'
    id: string
    actions: Array<{
      __typename?: 'Action'
      fields: Array<{ __typename?: 'Field'; fieldId: string; value: string }>
    }>
  } | null
}

export type ChangeAvatarMutationVariables = Exact<{
  userId: Scalars['String']
  avatar: AvatarInput
}>

export type ChangeAvatarMutation = {
  __typename?: 'Mutation'
  changeAvatar?: { __typename?: 'Avatar'; type: string; data: string } | null
}

export type ChangePasswordMutationVariables = Exact<{
  userId: Scalars['String']
  existingPassword: Scalars['String']
  password: Scalars['String']
}>

export type ChangePasswordMutation = {
  __typename?: 'Mutation'
  changePassword?: string | null
}

export type ChangePhoneMutationVariables = Exact<{
  userId: Scalars['String']
  phoneNumber: Scalars['String']
  nonce: Scalars['String']
  verifyCode: Scalars['String']
}>

export type ChangePhoneMutation = {
  __typename?: 'Mutation'
  changePhone?: string | null
}

export type ChangeEmailMutationVariables = Exact<{
  userId: Scalars['String']
  email: Scalars['String']
  nonce: Scalars['String']
  verifyCode: Scalars['String']
}>

export type ChangeEmailMutation = {
  __typename?: 'Mutation'
  changeEmail?: string | null
}

export type GetUserByMobileQueryVariables = Exact<{
  mobile?: InputMaybe<Scalars['String']>
}>

export type GetUserByMobileQuery = {
  __typename?: 'Query'
  getUserByMobile?: {
    __typename?: 'User'
    id: string
    username?: string | null
    mobile?: string | null
    email?: string | null
    systemRole: SystemRoleType
    status: Status
    role: { __typename?: 'Role'; _id: string }
  } | null
}

export type GetUserByEmailQueryVariables = Exact<{
  email?: InputMaybe<Scalars['String']>
}>

export type GetUserByEmailQuery = {
  __typename?: 'Query'
  getUserByEmail?: {
    __typename?: 'User'
    id: string
    username?: string | null
    mobile?: string | null
    email?: string | null
    systemRole: SystemRoleType
    status: Status
    role: { __typename?: 'Role'; _id: string }
  } | null
}

export type EmailAllUsersQueryVariables = Exact<{
  subject: Scalars['String']
  body: Scalars['String']
  locale: Scalars['String']
}>

export type EmailAllUsersQuery = {
  __typename?: 'Query'
  sendNotificationToAllUsers?: {
    __typename?: 'NotificationResult'
    success: boolean
  } | null
}

export type RegisterSystemMutationVariables = Exact<{
  system?: InputMaybe<SystemInput>
}>

export type RegisterSystemMutation = {
  __typename?: 'Mutation'
  registerSystem?: {
    __typename?: 'SystemSecret'
    clientSecret: string
    system: {
      __typename?: 'System'
      _id: string
      clientId: string
      name: string
      shaSecret: string
      status: SystemStatus
      type: SystemType
      integratingSystemType?: IntegratingSystemType | null
      settings?: {
        __typename?: 'SystemSettings'
        webhook?: Array<{
          __typename?: 'WebhookPermission'
          event: string
          permissions: Array<string>
        }> | null
      } | null
    }
  } | null
}

export type DeactivateSystemMutationVariables = Exact<{
  clientId: Scalars['ID']
}>

export type DeactivateSystemMutation = {
  __typename?: 'Mutation'
  deactivateSystem?: {
    __typename?: 'System'
    _id: string
    clientId: string
    name: string
    shaSecret: string
    status: SystemStatus
    type: SystemType
    settings?: {
      __typename?: 'SystemSettings'
      webhook?: Array<{
        __typename?: 'WebhookPermission'
        event: string
        permissions: Array<string>
      }> | null
    } | null
  } | null
}

export type ReactivateSystemMutationVariables = Exact<{
  clientId: Scalars['ID']
}>

export type ReactivateSystemMutation = {
  __typename?: 'Mutation'
  reactivateSystem?: {
    __typename?: 'System'
    _id: string
    clientId: string
    name: string
    shaSecret: string
    status: SystemStatus
    type: SystemType
    settings?: {
      __typename?: 'SystemSettings'
      webhook?: Array<{
        __typename?: 'WebhookPermission'
        event: string
        permissions: Array<string>
      }> | null
    } | null
  } | null
}

export type RefreshSystemSecretMutationVariables = Exact<{
  clientId: Scalars['String']
}>

export type RefreshSystemSecretMutation = {
  __typename?: 'Mutation'
  refreshSystemSecret?: {
    __typename?: 'SystemSecret'
    clientSecret: string
    system: {
      __typename?: 'System'
      _id: string
      clientId: string
      name: string
      shaSecret: string
      status: SystemStatus
      type: SystemType
    }
  } | null
}

export type UpdatePermissionsMutationVariables = Exact<{
  setting: UpdatePermissionsInput
}>

export type UpdatePermissionsMutation = {
  __typename?: 'Mutation'
  updatePermissions?: {
    __typename?: 'System'
    _id: string
    clientId: string
    name: string
    shaSecret: string
    status: SystemStatus
    type: SystemType
    settings?: {
      __typename?: 'SystemSettings'
      webhook?: Array<{
        __typename?: 'WebhookPermission'
        event: string
        permissions: Array<string>
      }> | null
    } | null
  } | null
}

export type DeleteSystemMutationVariables = Exact<{
  clientId: Scalars['ID']
}>

export type DeleteSystemMutation = {
  __typename?: 'Mutation'
  deleteSystem?: {
    __typename?: 'System'
    _id: string
    clientId: string
    name: string
    shaSecret: string
    status: SystemStatus
    type: SystemType
  } | null
}

export type GetTotalCorrectionsQueryVariables = Exact<{
  event: Scalars['String']
  timeStart: Scalars['String']
  timeEnd: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
}>

export type GetTotalCorrectionsQuery = {
  __typename?: 'Query'
  getTotalCorrections?: Array<{
    __typename?: 'CorrectionMetric'
    total: number
    reason: string
  }> | null
}

export type GetTotalMetricsQueryVariables = Exact<{
  event: Scalars['String']
  timeStart: Scalars['String']
  timeEnd: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
}>

export type GetTotalMetricsQuery = {
  __typename?: 'Query'
  getTotalMetrics?: {
    __typename?: 'TotalMetricsResult'
    estimated: {
      __typename?: 'Estimation'
      totalEstimation: number
      maleEstimation: number
      femaleEstimation: number
      locationId: string
      locationLevel: string
    }
    results: Array<{
      __typename?: 'EventMetrics'
      total: number
      gender: string
      eventLocationType: string
      practitionerRole: string
      timeLabel: string
    }>
  } | null
}

export type GetLocationStatisticsQueryVariables = Exact<{
  locationId?: InputMaybe<Scalars['String']>
  populationYear: Scalars['Int']
  status: Array<InputMaybe<Scalars['String']>> | InputMaybe<Scalars['String']>
  event?: InputMaybe<Event>
  officeSelected: Scalars['Boolean']
}>

export type GetLocationStatisticsQuery = {
  __typename?: 'Query'
  getLocationStatistics?: {
    __typename?: 'LocationStatisticsResponse'
    population?: number | null
    offices: number
    registrars: number
  } | null
  fetchRegistrationCountByStatus?: {
    __typename?: 'RegistrationCountResult'
    total: number
    results: Array<{
      __typename?: 'StatusWiseRegistrationCount'
      status: string
      count: number
    } | null>
  } | null
}

export type HasChildLocationQueryVariables = Exact<{
  parentId: Scalars['String']
}>

export type HasChildLocationQuery = {
  __typename?: 'Query'
  hasChildLocation?: {
    __typename?: 'Location'
    id: string
    type?: string | null
    identifier?: Array<{
      __typename?: 'Identifier'
      system?: string | null
      value?: string | null
    }> | null
  } | null
}

export type FetchMonthWiseEventMetricsQueryVariables = Exact<{
  timeStart: Scalars['String']
  timeEnd: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
  event: Scalars['String']
}>

export type FetchMonthWiseEventMetricsQuery = {
  __typename?: 'Query'
  fetchMonthWiseEventMetrics?: Array<{
    __typename?: 'MonthWiseEstimationMetric'
    total: number
    estimated: number
    withinTarget: number
    within1Year: number
    within5Years: number
    month: number
    year: number
  }> | null
}

export type FetchLocationWiseEventMetricsQueryVariables = Exact<{
  timeStart: Scalars['String']
  timeEnd: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
  event: Scalars['String']
}>

export type FetchLocationWiseEventMetricsQuery = {
  __typename?: 'Query'
  fetchLocationWiseEventMetrics?: Array<{
    __typename?: 'LocationWiseEstimationMetric'
    total: number
    withinTarget: number
    within1Year: number
    within5Years: number
    estimated: number
    locationId: string
    locationName: string
  }> | null
}

export type GetRegistrationsListByFilterQueryVariables = Exact<{
  event: Scalars['String']
  timeStart: Scalars['String']
  timeEnd: Scalars['String']
  filterBy: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
  skip: Scalars['Int']
  size: Scalars['Int']
}>

export type GetRegistrationsListByFilterQuery = {
  __typename?: 'Query'
  getRegistrationsListByFilter?:
    | {
        __typename: 'TotalMetricsByLocation'
        total?: number | null
        results: Array<{
          __typename?: 'EventMetricsByLocation'
          total: number
          late: number
          delayed: number
          home: number
          healthFacility: number
          location: { __typename?: 'Location'; name?: string | null }
        }>
      }
    | {
        __typename: 'TotalMetricsByRegistrar'
        total?: number | null
        results: Array<{
          __typename?: 'EventMetricsByRegistrar'
          total: number
          late: number
          delayed: number
          registrarPractitioner?: {
            __typename?: 'User'
            id: string
            systemRole: SystemRoleType
            role: {
              __typename?: 'Role'
              _id: string
              labels: Array<{
                __typename?: 'RoleLabel'
                lang: string
                label: string
              }>
            }
            primaryOffice?: {
              __typename?: 'Location'
              name?: string | null
              id: string
            } | null
            name: Array<{
              __typename?: 'HumanName'
              firstNames?: string | null
              familyName?: string | null
              use?: string | null
            }>
            avatar?: {
              __typename?: 'Avatar'
              type: string
              data: string
            } | null
          } | null
        }>
      }
    | {
        __typename: 'TotalMetricsByTime'
        total?: number | null
        results: Array<{
          __typename?: 'EventMetricsByTime'
          total: number
          delayed: number
          late: number
          home: number
          healthFacility: number
          month: string
          time: string
        }>
      }
    | null
}

export type SearchFieldAgentsQueryVariables = Exact<{
  locationId?: InputMaybe<Scalars['String']>
  primaryOfficeId?: InputMaybe<Scalars['String']>
  timeStart: Scalars['String']
  timeEnd: Scalars['String']
  event?: InputMaybe<Scalars['String']>
  status?: InputMaybe<Scalars['String']>
  language?: InputMaybe<Scalars['String']>
  count?: InputMaybe<Scalars['Int']>
  skip?: InputMaybe<Scalars['Int']>
  sort?: InputMaybe<Scalars['String']>
}>

export type SearchFieldAgentsQuery = {
  __typename?: 'Query'
  searchFieldAgents?: {
    __typename?: 'SearchFieldAgentResult'
    totalItems?: number | null
    results?: Array<{
      __typename?: 'SearchFieldAgentResponse'
      practitionerId?: string | null
      fullName?: string | null
      status?: Status | null
      primaryOfficeId?: string | null
      creationDate?: string | null
      totalNumberOfDeclarationStarted?: number | null
      totalNumberOfInProgressAppStarted?: number | null
      totalNumberOfRejectedDeclarations?: number | null
      averageTimeForDeclaredDeclarations?: number | null
      role?: {
        __typename?: 'Role'
        labels: Array<{ __typename?: 'RoleLabel'; label: string; lang: string }>
      } | null
      avatar?: { __typename?: 'Avatar'; type: string; data: string } | null
    } | null> | null
  } | null
}

export type GetTotalPaymentsQueryVariables = Exact<{
  timeStart: Scalars['String']
  timeEnd: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
  event: Scalars['String']
}>

export type GetTotalPaymentsQuery = {
  __typename?: 'Query'
  getTotalPayments?: Array<{
    __typename?: 'PaymentMetric'
    total: number
    paymentType: string
  }> | null
}

export type GetTotalCertificationsQueryVariables = Exact<{
  timeStart: Scalars['String']
  timeEnd: Scalars['String']
  locationId?: InputMaybe<Scalars['String']>
}>

export type GetTotalCertificationsQuery = {
  __typename?: 'Query'
  getTotalCertifications?: Array<{
    __typename?: 'CertificationMetric'
    total: number
    eventType: string
  }> | null
}

export type GetVsExportsQueryVariables = Exact<{ [key: string]: never }>

export type GetVsExportsQuery = {
  __typename?: 'Query'
  getVSExports?: {
    __typename?: 'TotalVSExport'
    results?: Array<{
      __typename?: 'VSExport'
      event: string
      startDate: any
      endDate: any
      url: string
      createdOn: any
      fileSize: string
    }> | null
  } | null
}

export type SubmitActivateUserMutationVariables = Exact<{
  userId: Scalars['String']
  password: Scalars['String']
  securityQuestionAnswers:
    | Array<InputMaybe<SecurityQuestionAnswer>>
    | InputMaybe<SecurityQuestionAnswer>
}>

export type SubmitActivateUserMutation = {
  __typename?: 'Mutation'
  activateUser?: string | null
}

export type FetchViewRecordByCompositionQueryVariables = Exact<{
  id: Scalars['ID']
}>

export type FetchViewRecordByCompositionQuery = {
  __typename?: 'Query'
  fetchEvent?: {
    __typename?: 'EventData'
    id: string
    actions: Array<{
      __typename?: 'Action'
      fields: Array<{ __typename?: 'Field'; fieldId: string; value: string }>
    }>
  } | null
}
